<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PINBOLEI</title>
  
  <subtitle>小磊的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pinbolei.cn/"/>
  <updated>2019-05-08T09:20:18.935Z</updated>
  <id>https://pinbolei.cn/</id>
  
  <author>
    <name>pinbolei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git flow工作流</title>
    <link href="https://pinbolei.cn/git-flow%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <id>https://pinbolei.cn/git-flow工作流/</id>
    <published>2019-05-08T09:12:19.000Z</published>
    <updated>2019-05-08T09:20:18.935Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>git flow使用介绍</p></blockquote><hr><a id="more"></a><h3 id="1-GitFlow是什么"><a href="#1-GitFlow是什么" class="headerlink" title="1.GitFlow是什么"></a>1.GitFlow是什么</h3><p><code>GitFlow</code>是一套基于git的工作流程，这个工作流程围绕着项目发布定义了一个严格的如何建立分支的模型。<br><code>GitFlow</code>规定了如何建立、合并分支，如何发布，如何维护历史版本等工作流程。简单说就是每一个功能特性的开发是在分支上开发，而不是在主干开发，分支开发完毕后再合并到主干上。<br><img src="/git-flow工作流/pic1.png" alt="gitFlow"></p><h3 id="2-GitFlow的优势"><a href="#2-GitFlow的优势" class="headerlink" title="2.GitFlow的优势"></a>2.GitFlow的优势</h3><p>GitFlow工作流程的优势在于：</p><ul><li>还处于半成品状态的feature不会影响到主干</li><li>各个开发人员之间做自己的分支，互不干扰</li><li>主干永远处于可编译、可运行的状态</li></ul><h3 id="3-GitFlow分支简述"><a href="#3-GitFlow分支简述" class="headerlink" title="3.GitFlow分支简述"></a>3.GitFlow分支简述</h3><p><strong>2.1主干分支（master和develop）</strong><br>1.master分支存储了发布版本的历史，各个版本通过tag来标记（<code>git tag -a v0.1</code>）<br>2.develop分支是一个集成分支，用来整合各个功能feature分支，也方便给master分支上的所有提交分配一个版本号。<br><img src="/git-flow工作流/pic2.png" alt="主干分支"></p><p>除了<code>master</code>和<code>develop</code>主分支线，其他的分支都是临时的分支，有一定的生命周期的，其余的工作流程分支都是围绕这两个分支之间的区别进行的。</p><p><strong>2.2功能分支(feature)</strong><br><img src="/git-flow工作流/pic3.png" alt="功能分支"><br>开发每个功能都必须新开个<code>feature</code>分支，<code>feature</code>分支派生自<code>develop</code>分支。开发完成后要合并回<code>develop</code>分支。<code>feature</code>分支永远不会和<code>master</code>分支打交道。</p><p><strong>2.3待发布分支(release)</strong><br><img src="/git-flow工作流/pic4.png" alt="待发布分支"><br><code>release</code>分支不是一个放正式发布产品的分支，可以理解为“<strong>预发布</strong>”或者“<strong>待发布</strong>”分支。<br>当开发的功能完成并满足发布的条件时，将这些满足条件的<code>feature</code>分支合并到<code>develop</code>分支上，然后从<code>develop</code>分支开出一个<code>release</code>分支，开始准备一个发布版本。<br>在<code>release</code>分支上，<strong>不能再添加新的功能</strong>，但是我们<strong>可以</strong>:</p><ol><li>将分支打包给测试人员测试</li><li>在这个分支上修改bug </li><li>编写发布文档</li></ol><p>当到发布日时，发布相关的工作都完成后，<code>release</code>分支合并回<code>master</code>分支，并打出版本标签，发布完成后，<code>release</code>分支合还要并回<code>develop</code>分支。</p><p><strong>2.4维护分支(hotfix)</strong><br><img src="/git-flow工作流/pic5.png" alt="维护分支"><br>维护分支也就是bug修复分支，用来快速修复生产环境的紧急问题。</p><p>项目发布后或多或少会有一些bug存在，而bug的修复工作并不适合在<code>develop</code>上做，这是因为：</p><ol><li>develop分支上可能包含还未验证过的feature </li><li>用户未必需要develop上的feature </li><li>develop还不能马上发布，而客户急需这个bug的修复。</li></ol><p>这个分支是唯一一个开放过程中直接从<code>master</code>分支派生来的分支。<br>快速的修复问题后，<code>hotfix</code>分支应该被合并回<code>master</code>分支，同时也要合并回<code>develop</code>分支，这样<code>develop</code>分支也能享受到bug修复的好处。然后<code>master</code>分支需要打一个版本标签，例如v0.11。</p><h3 id="4-GitFlow的命名约定"><a href="#4-GitFlow的命名约定" class="headerlink" title="4.GitFlow的命名约定"></a>4.GitFlow的命名约定</h3><ul><li>主分支名称：<strong>master</strong></li><li>主开发分支名称：<strong>develop</strong></li><li>标签（tag）名称：<strong>v##</strong>，如：v1.0.0</li><li>新功能开发分支名称：<strong>feature-##</strong>  or <strong>feature/##</strong>，如：feature-games或feature/games</li><li>发布分支名称：<strong>release-##</strong>  or <strong>release/##</strong>，如：release-1.0.0或release/1.0.0</li><li>维护分支名称：<strong>hotfix-##</strong> or <strong>hotfix/##</strong> ，如：hotfix-update或hotfix/update</li></ul><h3 id="5-GitFlow的工作流程"><a href="#5-GitFlow的工作流程" class="headerlink" title="5.GitFlow的工作流程"></a>5.GitFlow的工作流程</h3><p><strong>5.1 创建develop分支</strong><br>在本地<code>master</code>基础上创建一个<code>develop</code>分支，然后push到服务器；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch develop</span><br><span class="line">git push -u origin develop</span><br></pre></td></tr></table></figure></p><p>以后这个分支将会包含项目的全部历史，而<code>master</code>分支将只包含了部分历史。<br>其它开发者这时应该克隆中央仓库（如果已经克隆过该项目，则不需要执行以下第一条命令。），建好<code>develop</code>分支的跟踪分支：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh:<span class="comment">//user@host/path/to/repo.git</span></span><br><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></table></figure><p><strong>5.2 新建feature分支</strong><br><img src="/git-flow工作流/pic6.png" alt="新建feature分支"><br>基于<code>develop</code>分支创建新功能分支：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature/demo develop</span><br></pre></td></tr></table></figure></p><p>推送到远程仓库，共享：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>在此分支上开发提交代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add</span><br><span class="line">git commit -m <span class="string">'***'</span></span><br></pre></td></tr></table></figure></p><p><strong>5.3 完成新功能开发（合并feature分支到develop）</strong><br><img src="/git-flow工作流/pic7.png" alt="完成新功能开发"><br>当确定新功能开发完成，且联调测试通过，并且新功能负责人已经得到合并<code>feature</code>分支到<code>develop</code>分支的允许；这样才能合并<code>feature</code>分支到<code>develop</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git pull origin develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff feature/demo</span><br><span class="line">git push</span><br><span class="line">git branch -d feature/demo</span><br></pre></td></tr></table></figure></p><p>第一条命令是确保在合并新功能之前，<code>develop</code>分支是最新的。<br><strong>注</strong>：<strong>新功能分支，永远不可以直接合并到master分支。合并可能会有冲突，应该谨慎处理冲突。</strong></p><p><strong>5.4 新建待发布分支release</strong><br><img src="/git-flow工作流/pic8.png" alt="新建待发布分支"><br>项目准备发布时，基于<code>develop</code>分支新建一个待发布分支<code>release</code>,确立版本号:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release/v0<span class="number">.1</span> develop</span><br></pre></td></tr></table></figure></p><p>推送到远程仓库共享：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>这个分支是清理发布、执行所有测试、更新文档和其它为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。</p><p><strong>5.5 release分支合并到master发布</strong><br>如果准备好了对外发布，就将<code>release</code>分支合并到<code>master</code>分支和<code>develop</code>分支上，并删除发布分支。<br><img src="/git-flow工作流/pic9.png" alt="发布分支"><br><code>release</code>分支合并到<code>master</code>分支:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --on-off release/v0<span class="number">.1</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p><code>release</code>分支合并到<code>develop</code>分支，合并完成后并删除发布分支:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --on-off release/v0<span class="number">.1</span></span><br><span class="line">git push</span><br><span class="line">git branch -d release/v0<span class="number">.1</span></span><br></pre></td></tr></table></figure></p><p>合并回<code>develop</code>分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。</p><p>发布分支是作为功能开发（<code>develop</code>分支）和对外发布（<code>master</code>分支）间的缓冲。只要有合并到<code>master</code>分支，就应该打好Tag以方便跟踪。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v0<span class="number">.1</span> -m <span class="string">'Initial public release'</span> master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure></p><p><strong>5.6 线上Bug修复流程</strong><br><img src="/git-flow工作流/pic10.png" alt="线上Bug修复"><br>当终端用户，反馈系统有bug时，为了处理bug，需要从<code>master</code>中创建出维护分支<code>hotfix</code>，等到bug修复完成，需要合并回<code>master</code></p><p>基于<code>master</code>新建<code>hotfix</code>分支：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hotfix/v0<span class="number">.1</span><span class="number">.0</span><span class="number">.1</span> master</span><br></pre></td></tr></table></figure></p><p>当问题修复完成，并测试通过后，将<code>hotfix</code>分支合并到<code>master</code>分支和<code>develop</code>分支，并打出一个标签。</p><p>将<code>hotfix</code>分支合并到<code>master</code>分支:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --on-off hotfix/v0<span class="number">.1</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>将<code>hotfix</code>分支合并到<code>develop</code>分支,合并完成后删除<code>hotfix</code>分支：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --on-off hotfix/v0<span class="number">.1</span><span class="number">.1</span></span><br><span class="line">git push</span><br><span class="line">git branch -d hotfix/v0<span class="number">.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></p><p>打标签：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v0<span class="number">.1</span><span class="number">.1</span> -m <span class="string">'Initial public release'</span> master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure></p><h3 id="6-git-flow工作流程也可以使用git-flow工具完成"><a href="#6-git-flow工作流程也可以使用git-flow工具完成" class="headerlink" title="6.git flow工作流程也可以使用git flow工具完成"></a>6.git flow工作流程也可以使用git flow工具完成</h3><p>GitFlow不仅仅是一种规范，还提供了一套方便的工具。大大简化了执行GitFlow的过程。</p><p><strong>6.1 安装</strong><br>1.OSX<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git-flow</span><br></pre></td></tr></table></figure></p><p>2.Debian/Ubuntu Linux<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-<span class="keyword">get</span> install git-flow</span><br></pre></td></tr></table></figure></p><p>3.Windows(cygwin<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -q -O - --no-check-certificate https:<span class="comment">//github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash</span></span><br></pre></td></tr></table></figure></p><p><strong>6.2 Initialize</strong><br>对一个git仓库配置一下git flow。主要是一些命名规范，比如<code>feature</code>分支的前缀，<code>hotfix</code>分支的前缀等。一般用默认值就行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow init</span><br></pre></td></tr></table></figure><p><strong>6.3 新建feature分支</strong><br>从<code>develop</code>开启一个新的分支：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature start MYFEATURE</span><br></pre></td></tr></table></figure></p><p>这个命令会从<code>develop</code>分出一个分支，然后切换到这个分支上面。</p><p><strong>6.4 合并feature分支到develop</strong><br>一个<code>feature</code>分支开发完毕后，要做以下事情：</p><ul><li>把 MYFEATURE 合并到 develop</li><li>把这个分支干掉</li><li>切换回develop分支<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature finish FEATURE_NAME</span><br></pre></td></tr></table></figure></li></ul><p><strong>6.5 把feature分支推送到服务器</strong><br>果你想让别人和你一起开发MYFEATURE分支，那就把这个分支push到服务器上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature publish MYFEATURE</span><br></pre></td></tr></table></figure></p><p>获得一个别人push到服务器上的<code>feature</code>分支：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature pull origin MYFEATURE</span><br></pre></td></tr></table></figure></p><p><strong>6.6 新建release分支</strong><br>创建一个<code>release</code>分支，派生自<code>develop</code>分支：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release start RELEASE</span><br></pre></td></tr></table></figure></p><p><strong>6.7 把feature分支推送到服务器</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release publish RELEASE</span><br></pre></td></tr></table></figure></p><p><strong>6.8 合并release分支到master和develop</strong><br>一个<code>release</code>分支结束后，需要做以下工作：</p><ul><li>把release分支合并回master</li><li>给本次发布打tag</li><li>同时把release分支合并回develop</li><li>干掉release分支</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release finish RELEASE</span><br></pre></td></tr></table></figure><p>最后不要忘记把tag push到服务器<code>git push --tags</code></p><p><strong>6.9 新建hotfix分支</strong><br>开启一个hotfix分支：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow hotfix start VERSION</span><br></pre></td></tr></table></figure></p><p>结束一个<code>hotfix</code>分支，和<code>release</code>一样，同时合并回<code>develop</code>和<code>master</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow hotfix finish VERSION</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;git flow使用介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="git" scheme="https://pinbolei.cn/categories/git/"/>
    
    
      <category term="gitFlow" scheme="https://pinbolei.cn/tags/gitFlow/"/>
    
  </entry>
  
  <entry>
    <title>vue组件间通信</title>
    <link href="https://pinbolei.cn/vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>https://pinbolei.cn/vue组件间通信/</id>
    <published>2019-05-07T02:28:55.000Z</published>
    <updated>2019-05-08T09:14:07.891Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单说一下vue组件间的通信</p></blockquote><hr><a id="more"></a><h2 id="1-父组件向子组件传递数据"><a href="#1-父组件向子组件传递数据" class="headerlink" title="1.父组件向子组件传递数据"></a>1.父组件向子组件传递数据</h2><p><strong>通过 Prop 向子组件传递数据</strong></p><p>1.在父组件中注册子组件<br>2.在子组件中声名props,接收从父组件传过来的值<br>3.在子组件的标签中使用props创建的属性<br>4.在父组件中，把要传给子组件的值赋值给props创建的属性</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:message</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">    </span></span><br><span class="line"><span class="javascript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 声明 props</span></span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 同样也可以在 vm 实例中像 “this.message” 这样使用</span></span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data:&#123;</span></span><br><span class="line"><span class="javascript">    message:<span class="string">'Hello'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/vue组件间通信/pic1.png" alt="父组件向子组件传递数据"></p><h2 id="2-子组件向父组件传递数据"><a href="#2-子组件向父组件传递数据" class="headerlink" title="2.子组件向父组件传递数据"></a>2.子组件向父组件传递数据</h2><p><strong>子组件通过事件向父组件发送消息</strong></p><p>1.在子组件中以某种方式，触发一个自定义事件<br>2.利用$emit,将需要传的值作为第二个参数传过去，或者只是触发父组件中相对应的事件<br>3.父组件在使用子组件的地方直接用 v-on 来监听子组件触发的事件，通过 $event 访问到子组件传过来的值，或者这个事件处理函数是一个方法。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"counter-event-example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  // 'v-on' 可用 '@' 代替，'v-bind' 可用 ':'代替</span><br><span class="line">  // 用 v-on 来监听子组件触发的事件</span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span> @<span class="attr">increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span> @<span class="attr">increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 子组件</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'button-counter'</span>, &#123;</span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"incrementHandler"</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      counter: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    incrementHandler: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.counter += <span class="number">1</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 触发一个自定义事件</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#counter-event-example'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    total: 0</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    incrementTotal: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.total += <span class="number">1</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/vue组件间通信/pic2.png" alt="子组件通过事件向父组件发送消息"></p><p><strong>有时我们也会同时用到这两种通信方式</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"counter-event-example"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是子组件传递给父组件的数据:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button-counter</span> @<span class="attr">increment</span>=<span class="string">"incrementTotal"</span> <span class="attr">:message</span>=<span class="string">'message'</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"> Vue.component(<span class="string">'button-counter'</span>, &#123;</span></span><br><span class="line"><span class="xml">   template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是父组件传给子组件的信息:<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"incrementHandler"</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">   props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="javascript">   data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">       counter: 0</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined">   &#125;,</span></span><br><span class="line"><span class="undefined">   methods: &#123;</span></span><br><span class="line"><span class="javascript">     incrementHandler: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">this</span>.counter += <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>, <span class="keyword">this</span>.counter);</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined">   &#125;,</span></span><br><span class="line"><span class="undefined"> &#125;)</span></span><br><span class="line"><span class="javascript"> <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">   el: <span class="string">'#counter-event-example'</span>,</span></span><br><span class="line"><span class="undefined">   data: &#123;</span></span><br><span class="line"><span class="undefined">     total: 0,</span></span><br><span class="line"><span class="javascript">     message: <span class="string">'请点击按钮'</span></span></span><br><span class="line"><span class="undefined">   &#125;,</span></span><br><span class="line"><span class="undefined">   methods: &#123;</span></span><br><span class="line"><span class="javascript">     incrementTotal: <span class="function"><span class="keyword">function</span> (<span class="params">counter</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">this</span>.total = counter;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined"> &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/vue组件间通信/pic3.png" alt="子父组件间通信"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简单说一下vue组件间的通信&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="vue" scheme="https://pinbolei.cn/categories/vue/"/>
    
    
      <category term="组件间通信" scheme="https://pinbolei.cn/tags/%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    
      <category term="prop" scheme="https://pinbolei.cn/tags/prop/"/>
    
  </entry>
  
  <entry>
    <title>vue组件keep-alive</title>
    <link href="https://pinbolei.cn/vue%E7%BB%84%E4%BB%B6keep-alive/"/>
    <id>https://pinbolei.cn/vue组件keep-alive/</id>
    <published>2019-01-04T03:17:53.000Z</published>
    <updated>2019-05-08T09:25:54.222Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vue组件 keep-alive使用简介</p></blockquote><hr><a id="more"></a><p>keep-alive适用于动态组件中，当在组件之间切换的时候，你有时会想保持这些组件的状态，以避免反复重渲染导致的性能问题。</p><p>keep-alive让组件实例能够被在它们第一次被创建的时候缓存下来。</p><p><strong>注意这个 <code>&lt;keep-alive&gt;</code> 要求被切换到的组件都有自己的名字，不论是通过组件的 name 选项还是局部/全局注册。</strong></p><h3 id="Props："><a href="#Props：" class="headerlink" title="Props："></a>Props：</h3><p><code>include</code> - 字符串或正则表达式。只有名称匹配的组件会被缓存。<br><code>exclude</code> - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。<br><code>max</code> - 数字。最多可以缓存多少组件实例。</p><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。<br><code>&lt;keep-alive&gt;</code>是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。<br>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>主要用于保留组件状态或避免重新渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多个条件判断的子组件 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comp-a</span> <span class="attr">v-if</span>=<span class="string">"a &gt; 1"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comp-b</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `&lt;transition&gt;` 一起使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>include</code> and <code>exclude</code></strong></p><p><code>include</code> 和 <code>exclude</code>属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">"a,b"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"/a|b/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"['a', 'b']"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体示例：</p><p>一个简单的tab切换,可以尝试把<code>&lt;keep-alive&gt;</code>去掉之后,对比一下,然后就会发现它的好处。</p><p>test.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"testNav"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'selected':tab === 1,'testTitle':true&#125;"</span> @<span class="attr">click</span>=<span class="string">"toTab(1)"</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'selected':tab === 2,'testTitle':true&#125;"</span>  @<span class="attr">click</span>=<span class="string">"toTab(2)"</span>&gt;</span>标题二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Test1</span> <span class="attr">v-if</span>=<span class="string">"tab === 1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Test1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Test2</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Test2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> Test1 <span class="keyword">from</span> <span class="string">'./test1.vue'</span>;</span><br><span class="line">  <span class="keyword">import</span> Test2 <span class="keyword">from</span> <span class="string">'./test2.vue'</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          tab: <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Test1,</span><br><span class="line">      Test2,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      toTab(index) &#123;</span><br><span class="line">          <span class="keyword">this</span>.tab = index;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style lang="less"&gt;</span></span><br><span class="line"><span class="regexp">.test &#123;</span></span><br><span class="line"><span class="regexp">  width: 100%;</span></span><br><span class="line"><span class="regexp">  .testNav &#123;</span></span><br><span class="line"><span class="regexp">    height: 60px;</span></span><br><span class="line"><span class="regexp">    line-height: 60px;</span></span><br><span class="line"><span class="regexp">    display: flex;</span></span><br><span class="line"><span class="regexp">    border-bottom: 1px solid #e5e5e5;</span></span><br><span class="line"><span class="regexp">    .testTitle &#123;</span></span><br><span class="line"><span class="regexp">      flex: 1;</span></span><br><span class="line"><span class="regexp">      text-align: center;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    .selected &#123;</span></span><br><span class="line"><span class="regexp">      color: red;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>test1.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"test1"</span>&gt;</span><br><span class="line">    test1</span><br><span class="line">    &#123;&#123;testInfo1&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          testInfo1: <span class="string">''</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    activated() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'测试1被激活'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    deactivated() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'测试1被缓存'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.testInfo1 = <span class="string">'这是测试一的数据'</span>;</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>test2.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    test2</span><br><span class="line">    &#123;&#123;testInfo2&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        testInfo2: <span class="string">''</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,  </span><br><span class="line">    activated() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'测试2被激活'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    deactivated() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'测试2被缓存'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.testInfo2 = <span class="string">'这是测试二的数据'</span>;</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>运行代码，打开控制台，你会更直观的看到<code>keep-alive</code>的作用，以及<code>activated</code>和<code>deactivated</code>这两个函数被触发的时间</p><p><strong>用setTimeout模拟请求后端接口</strong></p><p>1.刚打开页面：<br><img src="/vue组件keep-alive/pic1.png" alt="图1"></p><p>2.点击标题二</p><p><img src="/vue组件keep-alive/pic2.png" alt="图2"></p><p>3.再次点击标题一，你会发现信息会快速显示出来：</p><p><img src="/vue组件keep-alive/pic3.png" alt="图3"></p><blockquote><p>上述示例代码原引用作者 funnycoderstar，链接<a href="https://juejin.im/post/5ad56d86518825556534ff4b" target="_blank" rel="noopener">https://juejin.im/post/5ad56d86518825556534ff4b</a></p></blockquote><p>以上是添加了<code>keep-alive</code>的情况下，如果去掉<code>keep-alive</code>，每次切换tab你会发现都会重新请求一次数据，感兴趣的可以尝试一下。</p><p><strong>注</strong>：匹配首先检查组件自身的 name 选项，如果 name 选项不可用，则匹配它的局部注册名称 (父组件 components 选项的键值)。匿名组件不能被匹配。</p><p><strong><code>max</code></strong></p><p>最多可以缓存多少组件实例。一旦这个数字达到了，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:max</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;vue组件 keep-alive使用简介&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="vue" scheme="https://pinbolei.cn/categories/vue/"/>
    
    
      <category term="keep-alive" scheme="https://pinbolei.cn/tags/keep-alive/"/>
    
  </entry>
  
  <entry>
    <title>常见的网页设计错误（下）</title>
    <link href="https://pinbolei.cn/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E9%94%99%E8%AF%AF%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://pinbolei.cn/常见的网页设计错误（下）/</id>
    <published>2019-01-02T08:08:05.000Z</published>
    <updated>2019-05-06T07:45:12.903Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为翻译的原文 原文地址<a href="http://blog-en.tilda.cc/articles-website-design-mistakes" target="_blank" rel="noopener">http://blog-en.tilda.cc/articles-website-design-mistakes</a></p></blockquote><hr><a id="more"></a><h2 id="文章设计中的错误"><a href="#文章设计中的错误" class="headerlink" title="文章设计中的错误"></a>文章设计中的错误</h2><h3 id="1-长而坚固的副本"><a href="#1-长而坚固的副本" class="headerlink" title="1.长而坚固的副本"></a>1.长而坚固的副本</h3><p>文本墙使阅读难以理解。为了便于导航，将其拆分为段落或引入诸如关键短语或图像之类的中断。<br><img src="/常见的网页设计错误（下）/pic1.png" alt="1-1"><br><img src="/常见的网页设计错误（下）/pic2.png" alt="1-2"><br>图1-1，文字墙很难看。<br>图1-2，拉引号或图像等元素使阅读文本更容易。</p><h3 id="2-标题位于前一段和下一段之间相同的距离"><a href="#2-标题位于前一段和下一段之间相同的距离" class="headerlink" title="2.标题位于前一段和下一段之间相同的距离"></a>2.标题位于前一段和下一段之间相同的距离</h3><p>标题不应该在类似距离的章节之间“挂起”，因为它属于下面的段落。标题上方的距离应比其下方的空间大2-3倍。同时，标题下的距离应与段落之间的距离大致相同，或稍大一些。这样，标题将在视觉上引用后续文本。<br><img src="/常见的网页设计错误（下）/pic3.png" alt="2-1"><br><img src="/常见的网页设计错误（下）/pic4.png" alt="2-2"><br>图2-1，标题位于其上方和下方的段落之间的相等距离​​处，并且不清楚它属于哪个段落。<br>图2-2，由于在标题下使用了填充，很明显标题属于下面的文本。</p><h3 id="3-没有逻辑顺序"><a href="#3-没有逻辑顺序" class="headerlink" title="3.没有逻辑顺序"></a>3.没有逻辑顺序</h3><p>在排版中，对比用于在视觉上划分不同级别的文本并建立严格的层次结构。主标题应该是页面上最突出的，副标题应该相当小但仍然清晰可见。<br><img src="/常见的网页设计错误（下）/pic5.png" alt="3-1"><br><img src="/常见的网页设计错误（下）/pic6.png" alt="3-2"><br>图3-1，标题和子标题大小大致相同，它们之间没有明确的层次结构。<br>图3-2，从逻辑上讲，标题比子标题更重要。</p><h3 id="4-块上方和下方的填充不同"><a href="#4-块上方和下方的填充不同" class="headerlink" title="4.块上方和下方的填充不同"></a>4.块上方和下方的填充不同</h3><p>如果块具有相同的重量，则它们应具有相同的外观和感觉并且彼此之间的距离相等。<br><img src="/常见的网页设计错误（下）/pic7.png" alt="4-1"><img src="/常见的网页设计错误（下）/pic8.png" alt="4-2"><br>图4-1，如果标题和作者图像之间的空间太窄，看起来好像作者更多地关注标题而不是后面的文本。<br>图4-2，由于图像上方和下方的相同尺寸填充，块看起来相同。</p><h3 id="5-标题位置太靠近图像"><a href="#5-标题位置太靠近图像" class="headerlink" title="5.标题位置太靠近图像"></a>5.标题位置太靠近图像</h3><p>一方面，插图及其标题形成一个整体，但这些是两个独立的元素，并且标题不应干扰图像。<br><img src="/常见的网页设计错误（下）/pic9.png" alt="5-1"><img src="/常见的网页设计错误（下）/pic10.png" alt="5-2"><br>图5-1，标题贴在图像上，我们无法正确地与其中任何一个进行交互。<br>图5-2，图像与其标题之间有很多空白区域，但很明显标题与图像一致。</p><h3 id="6-副标题和文本副本之间的空间太小"><a href="#6-副标题和文本副本之间的空间太小" class="headerlink" title="6.副标题和文本副本之间的空间太小"></a>6.副标题和文本副本之间的空间太小</h3><p>后面的小标题和文本副本属于一起，但如果文章中段落之间的空格大于子标题和下一段之间的空格，则该文章看起来脱节。<br><img src="/常见的网页设计错误（下）/pic11.png" alt="6-1"><img src="/常见的网页设计错误（下）/pic12.png" alt="6-2"><br>图6-1，标题和段落之间的空间小于段落之间的空间。<br>图6-2，标题后的空格略大于段落之间的空格。</p><h3 id="7-突出元素放置得太靠近正文"><a href="#7-突出元素放置得太靠近正文" class="headerlink" title="7.突出元素放置得太靠近正文"></a>7.突出元素放置得太靠近正文</h3><p>用作重点表达的元素（如关键短语或引号）是独立的对象。要让它们真正脱颖而出，请将它们设置为75-120像素的主体副本。<br><img src="/常见的网页设计错误（下）/pic13.png" alt="7-1"><img src="/常见的网页设计错误（下）/pic14.png" alt="7-2"><br>图7-1，主要文本和突出元素之间的空间太小。<br>图7-2，由于大填充，拉引号真正脱颖而出。</p><h3 id="8-低对比度元素"><a href="#8-低对比度元素" class="headerlink" title="8.低对比度元素"></a>8.低对比度元素</h3><p>如果您想强调某个短语，请加粗，使一个关键短语大于主文本10-15 px。让关键短语从文本的其余部分中脱颖而出。<br><img src="/常见的网页设计错误（下）/pic15.png" alt="8-1"><img src="/常见的网页设计错误（下）/pic16.png" alt="8-2"><br>图8-1，关键短语与副本的其余部分混合在一起。它看起来很乱，所以尽量避免这种情况。<br>图8-2，现在每个人都可以看到它，这要归功于大字体和文本周围足够的填充。</p><h3 id="9-窄文本块的彩色背景"><a href="#9-窄文本块的彩色背景" class="headerlink" title="9.窄文本块的彩色背景"></a>9.窄文本块的彩色背景</h3><p>如果您想突出显示页面的一小部分（例如作者信息），则足以在此周围设置足够的填充，这将产生空间印象。不要将此部分放在彩色背景上; 这看起来不合适。<br><img src="/常见的网页设计错误（下）/pic17.png" alt="9-1"><img src="/常见的网页设计错误（下）/pic18.png" alt="9-2"></p><p>不要使用颜色作为子标题。使用更大的字体和填充应足以使其在页面上弹出<br><img src="/常见的网页设计错误（下）/pic19.png" alt="9-3"></p><h3 id="10-两个全屏图像之间有一个空白区域"><a href="#10-两个全屏图像之间有一个空白区域" class="headerlink" title="10.两个全屏图像之间有一个空白区域"></a>10.两个全屏图像之间有一个空白区域</h3><p>在序列中使用多个全屏图像时，请避免在它们之间留出空格。边框仍然可见，并且无需添加其他元素。它只是没有添加任何东西。<br><img src="/常见的网页设计错误（下）/pic20.png" alt="10-1"><img src="/常见的网页设计错误（下）/pic21.png" alt="10-2"><br>图10-1，全屏图像之间的空白空间毫无意义，看起来不太好。<br>图10-2，在这个例子中，图像之间存在和谐的流动。</p><h3 id="11-使用了太多的设计口音"><a href="#11-使用了太多的设计口音" class="headerlink" title="11.使用了太多的设计口音"></a>11.使用了太多的设计口音</h3><p>设计重音（例如这里的粗体）很少有效。放入太多，这将妨碍阅读页面。<br><img src="/常见的网页设计错误（下）/pic22.png" alt="11-1"><br>许多单词以粗体标记，因此文本副本显示为已损坏<br><img src="/常见的网页设计错误（下）/pic23.png" alt="11-2"><br>一些标记的词语引起了对自己的注意，并且不会干扰文本的其余部分</p><h3 id="12-排版样式太多"><a href="#12-排版样式太多" class="headerlink" title="12.排版样式太多"></a>12.排版样式太多</h3><p>设计不应干扰可读性。排版样式越少，重要的元素就越明显。它足以强调标题和小标题，并使用对比关键短语。<br><img src="/常见的网页设计错误（下）/pic24.png" alt="12-1"><img src="/常见的网页设计错误（下）/pic25.png" alt="12-2"><br>图12-1，这个文本有太多的排版设备。他们分散了读者的注意力。<br>图12-2，很少排版样式，重点很明确，并且观察文本层次。</p><h3 id="13-在长篇文章中集中文本"><a href="#13-在长篇文章中集中文本" class="headerlink" title="13.在长篇文章中集中文本"></a>13.在长篇文章中集中文本</h3><p>中心通常应用于标题和块引号，以区别于文本的其余部分。中心长文本难以阅读。<br><img src="/常见的网页设计错误（下）/pic26.png" alt="13-1"><img src="/常见的网页设计错误（下）/pic27.png" alt="13-2"><br>图13-1，中心文本看起来很乱，而且很难阅读。<br>图13-2，左侧对齐的文字很容易在眼睛上。</p><h3 id="14-标题看起来太靠近图像了"><a href="#14-标题看起来太靠近图像了" class="headerlink" title="14.标题看起来太靠近图像了"></a>14.标题看起来太靠近图像了</h3><p>标题是个人设计元素。它不应该太靠近随后的图像。对于获胜组合，设置不小于60像素的填充，并添加一个子标题 - 它将展开页面的内容并将正确的重点放在您需要的位置。<br><img src="/常见的网页设计错误（下）/pic28.png" alt="14-1"><img src="/常见的网页设计错误（下）/pic29.png" alt="14-2"><br>图14-1，标题太靠近图像，此页面上没有喘息空间。<br>图14-2，这里标题通过子标题与图像分开，并且它与整个部分有关，而不仅仅是图像。</p><h3 id="15-在不需要时使用斜体"><a href="#15-在不需要时使用斜体" class="headerlink" title="15.在不需要时使用斜体"></a>15.在不需要时使用斜体</h3><p>斜体用于突出显示文本中的单词或短语。它不像粗体那样立即引人注目，但它确实可以让你在需要的地方强调它。</p><p>不要用斜体写出所有内容（正文，标题）。如果在文本副本中使用sans-serif字体，则完全避免使用斜体。<br><img src="/常见的网页设计错误（下）/pic30.png" alt="15-1"><br>由于字体大小和填充，这个短语已经突出，所以这里并不真正需要斜体。</p><p><img src="/常见的网页设计错误（下）/pic31.png" alt="15-2"><br>斜体在正确的位置，增加了适当的重点。</p><h3 id="16-块相对于页面中心和彼此显得不合适"><a href="#16-块相对于页面中心和彼此显得不合适" class="headerlink" title="16.块相对于页面中心和彼此显得不合适"></a>16.块相对于页面中心和彼此显得不合适</h3><p>如果您在编辑页面后稍微休息一下（更改字体大小，对齐或缩进）并查看其中的内容，您可以轻松地自己发现此错误。<br><img src="/常见的网页设计错误（下）/pic32.png" alt="16-1"><img src="/常见的网页设计错误（下）/pic33.png" alt="16-2"><br>图16-1，在此示例中，标题向左移动，文本复制到右侧。<br>图16-2，所有文本元素都相互协调。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文为翻译的原文 原文地址&lt;a href=&quot;http://blog-en.tilda.cc/articles-website-design-mistakes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog-en.tilda.cc/articles-website-design-mistakes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="网页设计" scheme="https://pinbolei.cn/categories/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="网页设计" scheme="https://pinbolei.cn/tags/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CSS选择器和CSS3属性</title>
    <link href="https://pinbolei.cn/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E5%92%8CCSS3%E5%B1%9E%E6%80%A7/"/>
    <id>https://pinbolei.cn/CSS选择器和CSS3属性/</id>
    <published>2018-12-18T01:00:18.000Z</published>
    <updated>2019-05-06T07:45:12.670Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要介绍CSS选择器和CSS3属性</p></blockquote><hr><a id="more"></a><h2 id="1、CSS3的概念和优势"><a href="#1、CSS3的概念和优势" class="headerlink" title="1、CSS3的概念和优势"></a>1、CSS3的概念和优势</h2><h3 id="A、CSS3的概念："><a href="#A、CSS3的概念：" class="headerlink" title="A、CSS3的概念："></a>A、CSS3的概念：</h3><blockquote><p>CSS3并不是一门语言，我们知道css是层叠样式表，是一种样式语言，是用来告诉浏览器如何渲染页面的。css3是css规范的最新版本，在css2.1上增加了很多强大的新功能，用来帮助开发人员解决一些问题，并且不再需要非语义化标签，复杂的js脚本和图片，例如圆角、多背景、透明度、阴影等等。css2.1是单一的规范，而css3被划分成几个模块组，每个模块组都有自己的规范。这样的好处就是整个css3的规范发布不会因为部分而印象其他模块的推进。</p></blockquote><h3 id="B、css3的优势："><a href="#B、css3的优势：" class="headerlink" title="B、css3的优势："></a>B、css3的优势：</h3><p>1）让页面效果看起来非常炫酷，用户体验更高。<br>2）有利于开发和维护，还能提高网站的性能，增加网站的可访问性，可用性。<br>3）使网站能适配更多的设备，利于seo网站优化，提高网站的搜索排名。</p><h3 id="C、CSS新特性："><a href="#C、CSS新特性：" class="headerlink" title="C、CSS新特性："></a>C、CSS新特性：</h3><p>CSS3选择器、图片的视觉效果<code>（圆角、阴影、渐变背景、图片边框等）</code>、背景的应用<code>（background-origin/background-clip/background-size）</code>、盒模型的变化、阴影效果（文本阴影、盒子阴影）、多列布局和弹性盒布局、web文字和font图标、颜色和透明度、圆角和边框的新特效、2D和3D变形、CSS3过渡和动画效果、媒体查询和<code>Responsive</code>布局。</p><h2 id="2、渐进增强和优雅降级的简介-扩展"><a href="#2、渐进增强和优雅降级的简介-扩展" class="headerlink" title="2、渐进增强和优雅降级的简介(扩展)"></a>2、渐进增强和优雅降级的简介(扩展)</h2><p><strong>渐进增强（progressive enhancement）</strong>：一开始只构建站点的最少特性，然后不断地对不同的浏览器追加不同的功能</p><p><strong>优雅降级（graceful degradation）</strong>：一开始就构建站点的完整功能，然后针对浏览器进行测试和修复</p><p>`“优雅降级”和“渐进增强”都关注于同一网站在不同设备里不同浏览器下的表现程度。 关键的区别则在于它们各自关注于何处，以及这种关注如何影响工作的流程。</p><p>“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。`</p><p>“渐进增强”观点则认为应关注于内容本身。<br><strong>区别</strong>：</p><p><code>优雅降级</code>即功能衰减是从复杂的现状开始，并试图减少用户体验的供给，而<code>渐进增强(pe)</code>则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。<code>功能衰减意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。</code></p><h2 id="3、CSS3-选择器——属性选择器"><a href="#3、CSS3-选择器——属性选择器" class="headerlink" title="3、CSS3 选择器——属性选择器"></a>3、CSS3 选择器——属性选择器</h2><p><strong>CSS选择器的优势</strong>：可以帮助开发人员在开发中减少对html类名和id名的依赖，以及对html结构的依赖，使编写代码更加简单轻松。</p><p>1、E[attr]：只使用属性名，但没有确定任何属性值；</p><p>2、E[attr=”value”]：指定属性名，并指定了该属性的属性值；</p><p>3、E[attr~=”value”]：指定属性名，并且具有属性值，此属性值是一个词列表，并且以空格隔开，其中词列表中包含了一个value词，而且等号前面的“〜”不能不写</p><p>4、E[attr^=”value”]：指定了属性名，并且有属性值，属性值是以value开头的；</p><p>5、E[attr$=”value”]：指定了属性名，并且有属性值，而且属性值是以value结束的</p><p>6、E[attr*=”value”]：指定了属性名，并且有属性值，而且属值中包含了value；</p><p>7、E[attr|=”value”]：指定了属性名，并且属性值是value或者以“value-”开头的值（比如说zh-cn）;</p><p><strong>这些属性选择器除了IE6不支持。</strong></p><h2 id="4、CSS3-选择器——伪类选择器"><a href="#4、CSS3-选择器——伪类选择器" class="headerlink" title="4、CSS3 选择器——伪类选择器"></a>4、CSS3 选择器——伪类选择器</h2><h3 id="1）动态伪类"><a href="#1）动态伪类" class="headerlink" title="1）动态伪类"></a>1）动态伪类</h3><p>动态伪类，因为这些伪类并不存在于HTML中,而只有当用户和网站交互的时候才能体现出来，动态伪类包含两种，第一种是我们在链接中常看到的锚点伪类，如”:link”,”:visited”;另外一种被称作用户行为伪类<br><strong>最常见的锚点伪类</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.demo a:link &#123;color:gray;&#125;/*链接没有被访问时*/</span><br><span class="line">.demo a:visited&#123;color:yellow;&#125;/*链接被访问过后*/</span><br><span class="line">.demo a:hover&#123;color:green;&#125;/*鼠标悬浮在链接上时*/</span><br><span class="line">.demo a:active&#123;color:blue;&#125;/*鼠标点中激活链接那一下*/</span><br></pre></td></tr></table></figure></p><p>对于这四个锚点伪类的设置，有一点需要特别注意，那就是他们的先后顺序，要让他们遵守一个爱恨原则LoVe/HAte,也就是Link–visited–hover–active。</p><h3 id="2）UI元素状态伪类"><a href="#2）UI元素状态伪类" class="headerlink" title="2）UI元素状态伪类"></a>2）UI元素状态伪类</h3><p>我们把<code>&quot;:enabled&quot;</code>,<code>&quot;:disabled&quot;</code>,<code>&quot;:checked&quot;</code>伪类称为UI元素状态伪类，这些主要是针对于HTML中的Form元素操作。<br><code>IE6-8不支持&quot;:checked&quot;,&quot;:enabled&quot;,&quot;:disabled&quot;这三种选择器。</code></p><h3 id="3）CSS3的-nth选择器"><a href="#3）CSS3的-nth选择器" class="headerlink" title="3）CSS3的:nth选择器"></a>3）CSS3的:nth选择器</h3><p>这个是CSS3选择器最新部分，有人也称这种选择器为CSS3结构类，下面是他们的用法：</p><p>①<code>:first-child</code>选择某个元素的第一个子元素；IE6不支持:first-child选择器</p><p>②<code>:last-child</code>选择某个元素的最后一个子元素；</p><p>③<code>:nth-child()</code>选择某个元素的一个或多个特定的子元素；</p><p>   A、:nth-child(length);/<em>参数是具体数字</em>/</p><p>   B、:nth-child(n);/<em>参数是n,n从0开始计算</em>/请注意了，这里的“n”只能是”n”，不能使用其他字母代替，不然会没有任何效果的。</p><p>   C、:nth-child(n<em>length)/</em>n的倍数选择，n从0开始算*/</p><p>   D、:nth-child(n+length);/<em>选择大于length后面的元素</em>/</p><p>   E、:nth-child(-n+length)/<em>选择小于length前面的元素</em>/</p><p>   F、:nth-child(n<em>length+1);/</em>表示隔几选一*/这种方法是实现隔几选一的效果。</p><p>   //上面length为整数,IE6-8和FF3-浏览器不支持”:nth-child”选择器。</p><p>④<code>:nth-last-child()</code>选择某个元素的一个或多个特定的子元素，从这个元素的最后一个子元素开始算；</p><p>⑤<code>:nth-of-type()</code>选择指定的元素；<br>       nth-of-type类似于:nth-child，不同的是他只计算选择器中指定的那个元素，唯一不同的是这种指定了元素的类型而以。同样在IE6-8和FF3.0-浏览器不支持这种选择器</p><p>⑥<code>:nth-last-of-type()</code>选择指定的元素，从元素的最后一个开始计算；</p><p>⑦<code>:first-of-type</code>选择一个上级元素下的第一个同类子元素；</p><p>⑧<code>:last-of-type</code>选择一个上级元素的最后一个同类子元素；</p><p>⑨<code>:only-child</code>选择的元素是它的父元素的唯一一个了元素；</p><p>⑩<code>:only-of-type</code>选择一个元素是它的上级元素的唯一一个相同类型的子元素；</p><p>⑾<code>:empty</code>选择的元素里面没有任何内容。</p><h2 id="4）否定选择器（-not）"><a href="#4）否定选择器（-not）" class="headerlink" title="4）否定选择器（:not）"></a>4）否定选择器（:not）</h2><p>否定选择器 :not()，可以让你定位不匹配该选择器的元素。IE6-8浏览器不支持:not()选择器。</p><h2 id="5）-root-选择文档的根元素"><a href="#5）-root-选择文档的根元素" class="headerlink" title="5）:root 选择文档的根元素"></a>5）:root 选择文档的根元素</h2><p><code>:root{ background:green;}</code>将样式绑定到页面的根元素中。所谓根元素，是指位于文档树中最顶层结构的元素，在HTML页面中就是值包含着整个页面的html部分</p><h2 id="6）-target-选择器可用于选取当前活动的目标元素。"><a href="#6）-target-选择器可用于选取当前活动的目标元素。" class="headerlink" title="6）:target 选择器可用于选取当前活动的目标元素。"></a>6）:target 选择器可用于选取当前活动的目标元素。</h2><p>使用该选择器来对页面中的某个target元素（该元素的id当做页面中的超链接来使用）指定样式，该样式只在用户点击了页面中的超链接，并且跳转到target元素后起作用。</p><h2 id="7）-lang-伪类"><a href="#7）-lang-伪类" class="headerlink" title="7）:lang 伪类"></a>7）:lang 伪类</h2><p><code>:lang 伪类使你有能力为不同的语言定义特殊的规则。在下面的例子中，:lang 类为属性值为 no 的 q 元素定义引号的类型：</code></p><p><img src="/CSS选择器和CSS3属性/pic1.png" alt="图7"></p><h2 id="5、CSS3-选择器–伪元素"><a href="#5、CSS3-选择器–伪元素" class="headerlink" title="5、CSS3 选择器–伪元素"></a>5、CSS3 选择器–伪元素</h2><h3 id="1）伪元素"><a href="#1）伪元素" class="headerlink" title="1）伪元素"></a>1）伪元素</h3><p>CSS中的伪元素大家以前看过：<code>:first-line,:first-letter,:before,:after;</code>那么在CSS3中，他对伪元素进行了一定的调整，在以前的基础上增加了一个<code>“：”</code>也就是现在变成了<code>“::first-letter,::first-line,::before,::after”</code>另外他还增加了一个<code>“::selection”</code>,两个<code>“：：”</code>和一个“：”css3中主要用来区分伪类和伪元素，到目前来说，这两种方式都是被接受的，也就是说不管使用哪种写法所起的作用都是一样的，只是一个书写格式不同而以。</p><p><code>::selection用来改变浏览网页选中文的默认效果。::selection在IE家族中，只有IE9+版本支持，在Firefox中需要加上其前缀“-moz”</code></p><h2 id="6、CSS3-选择器——层次选择器"><a href="#6、CSS3-选择器——层次选择器" class="headerlink" title="6、CSS3 选择器——层次选择器"></a>6、CSS3 选择器——层次选择器</h2><h3 id="1）后代选择器（E-F）"><a href="#1）后代选择器（E-F）" class="headerlink" title="1）后代选择器（Ｅ Ｆ）"></a>1）后代选择器（Ｅ Ｆ）</h3><p>后代选择器也被称作包含选择器,所起作用就是可以选择某元素的后代元素，这里Ｆ不管是E元素的子元素或者是孙元素或者是更深层次的关系，都将被选中，换句话说，不论Ｆ在Ｅ中有多少层关系，都将被选中：</p><h3 id="2）子元素选择器-E-gt-F"><a href="#2）子元素选择器-E-gt-F" class="headerlink" title="2）子元素选择器(E&gt;F)"></a>2）子元素选择器(E&gt;F)</h3><p>子元素选择器只能选择某元素的子元素，其中E为父元素，而F为子元素，其中E&gt;F所表示的是选择了Ｅ元素下的所有子元素Ｆ。</p><p><strong>IE6不支持子元素选择器。</strong></p><h3 id="3）相邻兄弟元素选择器-E-F"><a href="#3）相邻兄弟元素选择器-E-F" class="headerlink" title="3）相邻兄弟元素选择器(E + F)"></a>3）相邻兄弟元素选择器(E + F)</h3><p>相邻兄弟选择器可以选择紧接在另一元素后的元素，而且他们具有一个相同的父元素，换句话说，<code>EF两元素具有一个相同的父元素，而且Ｆ元素在Ｅ元素后面，而且相邻，这样我们就可以使用相邻兄弟元素选择器来选择Ｆ元素。</code></p><p><strong>IE6不支持这个选择器</strong></p><h3 id="4）通用兄弟选择器（E-〜-F）"><a href="#4）通用兄弟选择器（E-〜-F）" class="headerlink" title="4）通用兄弟选择器（Ｅ 〜 Ｆ）"></a>4）通用兄弟选择器（Ｅ 〜 Ｆ）</h3><p>通用兄弟元素选择器是CSS3新增加一种选择器，这种选择器将选择某元素后面的所有兄弟元素，他们也和相邻兄弟元素类似，需要在同一个父元素之中，换句话说，E和F元素是属于同一父元素之内，并且F元素在Ｅ元素之后，那么E ~ F 选择器将选择中所有Ｅ元素后面的Ｆ元素。<br>通用兄弟选择器和相邻兄弟选择器极其相似，只不过，相邻兄弟选择器仅选择是元素的仅与其相邻的后面元素（选中的仅一个元素）；而通用兄弟元素选择器，选中的是元素相邻的后面兄弟元素。IE6不支持这种选择器的用法。</p><h2 id="7、CSS3私有属性"><a href="#7、CSS3私有属性" class="headerlink" title="7、CSS3私有属性"></a>7、CSS3私有属性</h2><h3 id="什么是浏览器私有属性前缀？"><a href="#什么是浏览器私有属性前缀？" class="headerlink" title="什么是浏览器私有属性前缀？"></a>什么是浏览器私有属性前缀？</h3><p>CSS3的浏览器私有属性前缀是一个浏览器生产商经常使用的一种方式。它暗示该CSS属性或规则尚未成为W3C标准的一部分。<br><strong>以下是几种常用前缀</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-webkit- 谷歌 -moz- 火狐 -ms- IE浏览器 -o- 欧朋</span><br><span class="line">-khtml-（现在基本都没有用了，被-webkit-取代）</span><br></pre></td></tr></table></figure></p><p>举例来说，一个CSS3圆角的代码是：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-border-radius</span>: 50%;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-o-border-radius</span>: 50%;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-moz-border-radius</span>: 50%;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-ms-border-radius</span>: 50%;</span><br></pre></td></tr></table></figure></p><h3 id="CSS3前缀-标准代码的顺序是什么？"><a href="#CSS3前缀-标准代码的顺序是什么？" class="headerlink" title="CSS3前缀+标准代码的顺序是什么？"></a>CSS3前缀+标准代码的顺序是什么？</h3><p><strong>结论</strong>：是先写私有的CSS3属性，再写标准的CSS3属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-transform</span><span class="selector-pseudo">:rotate(-3deg)</span>; <span class="comment">/*为Chrome/Safari*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-moz-transform</span><span class="selector-pseudo">:rotate(-3deg)</span>; <span class="comment">/*为Firefox*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-ms-transform</span><span class="selector-pseudo">:rotate(-3deg)</span>; <span class="comment">/*为IE*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-o-transform</span><span class="selector-pseudo">:rotate(-3deg)</span>; <span class="comment">/*为Opera*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:rotate(-3deg)</span>; <span class="comment">/*为nothing*/</span></span><br></pre></td></tr></table></figure><p><code>什么时候我们可以去掉一个属性的CSS3前缀呢？</code></p><p>答案是，当一个属性成为标准，并且被Firefox、Chrome等浏览器的最新版普遍兼容的时候。</p><h2 id="8、CSS3新增属性"><a href="#8、CSS3新增属性" class="headerlink" title="8、CSS3新增属性"></a>8、CSS3新增属性</h2><h3 id="1）text-shadow-5px-5px-5px-f66-文字阴影"><a href="#1）text-shadow-5px-5px-5px-f66-文字阴影" class="headerlink" title="1）text-shadow:5px 5px 5px #f66; 文字阴影"></a>1）text-shadow:5px 5px 5px #f66; 文字阴影</h3><p><strong>语法：</strong></p><ol><li>text-shadow: h-shadow v-shadow blur color;</li><li>h-shadow    必需。水平阴影的位置。允许负值。为正值，阴影在对象的右边，反之阴影在对象的左边。</li><li>v-shadow    必需。垂直阴影的位置。允许负值。如果为正值，阴影在对象的底部，反之阴影在对象的顶部。</li><li>blur    可选。模糊的距离。 这个值只能是正值</li><li>color    可选。阴影的颜色。</li></ol><p><strong>注</strong>：Internet Explorer 9 以及更早版本的浏览器不支持</p><p>可是让我们头痛的是IE是不支持text-shadow效果，但为了在兼容这一问题，我们只好使用滤镜filter:shadow来处理（不提倡使用滤镜）。filter:shadow滤镜作用，也能使用对象产生阴影效果，不同的是shadow可产生渐近效果，使用阴影更平滑实现。</p><p><strong>滤镜语法</strong>：E {filter:shadow(Color=颜色值,Direction=数值,Strength=数值)}</p><p>其中E是元素选择器，Color用于设定对象的阴影色；Direction用于设定投影的主向，取值为0即零度（表示向上方向），45为右上，90为右，135为右下，180为下方，225为左下方，270为左方，315为左上方；Strength就是强度，类似于text-shadow中的blur值。</p><h3 id="2）box-shadow：让盒子在显示的时候产生阴影效果"><a href="#2）box-shadow：让盒子在显示的时候产生阴影效果" class="headerlink" title="2）box-shadow：让盒子在显示的时候产生阴影效果"></a>2）box-shadow：让盒子在显示的时候产生阴影效果</h3><p><strong>写法</strong>：box-shadow:length length length length color inset;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">第一个参数表示阴影离开盒子的横向距离</span><br><span class="line"></span><br><span class="line">第二个参数表示阴影离开盒子的纵向距离</span><br><span class="line"></span><br><span class="line">第三个参数表示阴影的模糊半径</span><br><span class="line"></span><br><span class="line">第四个参数表示阴影的延伸半径 （可省略）</span><br><span class="line"></span><br><span class="line">第五个参数表示阴影的颜色</span><br><span class="line"></span><br><span class="line">第六个参数表示是否使用内阴影 （可省略，默认是外阴影）</span><br></pre></td></tr></table></figure></p><p>Box-shadow:inset 1px 1px 1px 1px #000, color inset的顺序可以改变</p><h3 id="3）word-break-使用该属性自己决定自动换行的处理方法"><a href="#3）word-break-使用该属性自己决定自动换行的处理方法" class="headerlink" title="3）word-break:使用该属性自己决定自动换行的处理方法"></a>3）word-break:使用该属性自己决定自动换行的处理方法</h3><p>通过对其的指定，不仅仅可以让浏览器实现半角空格或连字符后面的换行，而且可以让浏览器实现任意位置的换行。</p><p><strong>参数</strong>:normal/keep-all/break-all</p><p><strong>normal</strong>:使用浏览器默认换行规则，根据语言自己的规则确定换行方式，中文到边界上的汉字换行，英文从整个单词换行</p><p><strong>keep-all</strong>:不允许字断开。在低版本的Chrome和Safari浏览器下不起任何效果</p><p><strong>break-all</strong>:允许在单词内换行（对于标点符号来说，允许标点符号位于行首，不过在IE中是不可以的）可以强行截断英文单词，达到词内换行效果。</p><h3 id="4）word-wrap-normal-break-word-属性用来标明是否允许浏览器在单词内进行断句"><a href="#4）word-wrap-normal-break-word-属性用来标明是否允许浏览器在单词内进行断句" class="headerlink" title="4）word-wrap: normal break-word;属性用来标明是否允许浏览器在单词内进行断句"></a>4）word-wrap: normal break-word;属性用来标明是否允许浏览器在单词内进行断句</h3><p><strong>normal</strong>    只在允许的断字点换行（浏览器保持默认处理）。</p><p><strong>break-word</strong>    在长单词或 URL 地址内部进行换行。将内容在边界内换行（不截断英文单词换行）。</p><h3 id="5）服务器字体："><a href="#5）服务器字体：" class="headerlink" title="5）服务器字体："></a>5）服务器字体：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@font-face：字体语法 在网页上显示服务端字体</span><br><span class="line"></span><br><span class="line">font-family： 规定字体的名称。</span><br><span class="line"></span><br><span class="line">src:url 定义字体文件的 URL。</span><br><span class="line"></span><br><span class="line">font-stretch: 不常用，没有兼容 定义如何拉伸字体</span><br><span class="line"></span><br><span class="line">font-weight： 设置加粗</span><br></pre></td></tr></table></figure><p><strong>注</strong>：在IE中使用时，只能使用微软自带的Embedded OpenType字体文件，扩展名为.eot，同时不需要使用format属性值，用法如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span>&#123;<span class="attribute">font-family</span>:BorderWeb;</span><br><span class="line"><span class="attribute">src</span>:<span class="built_in">url</span>(BORDERW0.eot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目文件夹中的fonts文件内容分别包括<code>粗体、斜体、粗斜体、小型大写字体</code></p><h3 id="6）background-clip-指定背景的显示范围-border-padding-content"><a href="#6）background-clip-指定背景的显示范围-border-padding-content" class="headerlink" title="6）background-clip 指定背景的显示范围 border padding content"></a>6）background-clip 指定背景的显示范围 border padding content</h3><p><strong>概念</strong>：在HTML页面中，一个具有背景的元素通常由元素的内容，内部补白（padding），边框，外部补白（margin）构成</p><p><code>border-box</code>    背景被裁剪到边框盒。</p><p><code>padding-box</code>    背景被裁剪到内边距框。 </p><p><code>content-box</code>    背景被裁剪到内容框。</p><p>text 在Webkit内核下，background-clip还有一个text属性，配合Webkit内核的私有属性text-fill-color:transparent可以制作背景图片填充文本的效果</p><p>-webkit-background-clip: text;</p><p>-webkit-text-fill-color: transparent;只有Webkit浏览器支持。</p><h3 id="7）、background-origin-指定绘制背景图像时的起点"><a href="#7）、background-origin-指定绘制背景图像时的起点" class="headerlink" title="7）、background-origin 指定绘制背景图像时的起点"></a>7）、background-origin 指定绘制背景图像时的起点</h3><p><strong>规定 :<code>background-position</code>属性相对于什么位置来定位。</strong></p><p><strong>参数</strong></p><p><code>padding-box</code>背景图像相对于内边距框来定位。 </p><p><code>border-box</code>背景图像相对于边框盒来定位。 </p><p><code>content-box</code>背景图像相对于内容框来定位。</p><h3 id="8）扩展知识点：background-clip与background-origin的用法区别？"><a href="#8）扩展知识点：background-clip与background-origin的用法区别？" class="headerlink" title="8）扩展知识点：background-clip与background-origin的用法区别？"></a>8）扩展知识点：background-clip与background-origin的用法区别？</h3><p><code>background-clip</code>：border|padding|content</p><p><code>background-origin</code>属性是用来控制元素背景图片定位<br>点（<code>background-position</code>）的起始位置。</p><p><code>background-clip</code>属性是用来控制元素背景图片（<code>background-image</code>）的展示区域。</p><p>该属性指定了背景在哪些区域可以显示，但与背景开始绘制的位置无关，背景的绘制的位置可以出现在不显示背景的区域，这时就相当于背景图片被不显示背景的区域裁剪了一部分一样。</p><p><strong>background-origin：padding|border|content</strong></p><p>该属性指定了背景从哪个区域(边框、补白或内容)开始绘制,但也仅仅能控制背景开始绘制的位置，你可以用这个属性在边框上绘制背景，但边框上的背景显不显示出来那就要由background-clip来决定了</p><p><strong>background-origin 属性规定 background-position 属性相对于什么位置来定位。</strong></p><h3 id="9）：background-size-指定背景中图像的尺寸"><a href="#9）：background-size-指定背景中图像的尺寸" class="headerlink" title="9）：background-size 指定背景中图像的尺寸"></a>9）：background-size 指定背景中图像的尺寸</h3><p><strong>参数</strong></p><p><code>length</code> 设置背景图像的高度和宽度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</p><p><code>percentage</code> 以父元素的百分比来设置背景图像的宽度和高度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</p><p><code>cover</code> 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。但这种方法会致使背景图片失真。</p><p><code>contain</code>保持背景图像本身的宽高比例，将背景图像缩放到宽度或高度正好适应所定义背景容器的区域。</p><p><strong>如何添加多个背景图</strong></p><p>使用background-repeat和background-position可以单独指定背景图像中某个文件的平铺方式与放置的位置</p><h3 id="10）background-break-指定内联元素的背景图像进行平铺时的循环方式，浏览器支持不友好，"><a href="#10）background-break-指定内联元素的背景图像进行平铺时的循环方式，浏览器支持不友好，" class="headerlink" title="10）background-break 指定内联元素的背景图像进行平铺时的循环方式，浏览器支持不友好，"></a>10）background-break 指定内联元素的背景图像进行平铺时的循环方式，浏览器支持不友好，</h3><p><code>bounding-box</code>：背景图像在整个内联元素中进行平铺。</p><p><code>each-box</code>：背景图像在行内中进行平铺。</p><p><code>continuous</code>：下一行的背景图像紧接着上一行中的图像继续平铺。</p><p><code>background-break</code>属性受限于浏览器的支持力度，目前使用度极低，仅<br>在Firefox下能实现，而且还需要修改属性写法，在此仅让大家参考。</p><h3 id="11）border-raidus-设置圆角"><a href="#11）border-raidus-设置圆角" class="headerlink" title="11）border-raidus 设置圆角"></a>11）border-raidus 设置圆角</h3><p>语法：border-radius: none | <length> {1,4}[/<length>{1,4}] ?</length></length></p><p><strong>border-radius是一种缩写方法。</strong></p><p>如果反斜杠符号“/”存在，“/”前面的值是设置元素圆角的水平方向半径，“/”后面的值是设置元素圆角的垂直方向的半径;<br>如果没有“/”，则元素圆角的水平和垂直方向的半径值相等。另外四个值是按照top-left、top-right、bottom-right和bottom-left顺序来设置的<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-top-left-radius：&lt;length&gt;/&lt;length&gt;；定义元素左上角圆角。</span><br><span class="line">border-top-right-radius：&lt;length&gt;/&lt;length&gt;；定义元素右上角圆角。</span><br><span class="line">border-bottom-right–radius：&lt;length&gt;/&lt;length&gt;；定义元素右下角圆角。</span><br><span class="line">border-bottom-left-radius：&lt;length&gt;/&lt;length&gt;；定义元素左下角圆角。</span><br></pre></td></tr></table></figure></p><p>上面四个子属性取值和border-radius是一样的，只不过水平和垂直方向仅一个值，“/”前面的值为水平方向半径，后面的值为垂直方向半径。如果第二个值省略，元素水平和垂直方向半径，其实就是以“<length>”为半径的四分之一圆。如果任意一个值为“0”，这个角就不是圆角</length></p><h3 id="12）：border-image-属性，可以使用图片来创建边框"><a href="#12）：border-image-属性，可以使用图片来创建边框" class="headerlink" title="12）：border-image 属性，可以使用图片来创建边框"></a>12）：border-image 属性，可以使用图片来创建边框</h3><p><code>border-image-source</code> 用在边框的图片的路径。 </p><p><code>border-image-slice</code> :number(没有单位)|percentage </p><p><code>border-image-slice</code>是用来分解引入进来的背景图片,图片边框向内偏移。<br>例如边框图片的大小是 300px×240px，取百分比为25%，30%，15%，20%，<br>它们实际对应的效果就是剪切了图片的60px，90px，36px，60px的四边大小</p><p><code>border-image-width</code> 图片边框的宽度。</p><p><code>border-image-repeat</code>图像边框是否应平铺(repeat)、铺满(round)或拉伸(stretch)。</p><h3 id="13）：颜色特性"><a href="#13）：颜色特性" class="headerlink" title="13）：颜色特性"></a>13）：颜色特性</h3><p><img src="/CSS选择器和CSS3属性/pic2.png" alt="图13"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要介绍CSS选择器和CSS3属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="css3" scheme="https://pinbolei.cn/categories/css3/"/>
    
    
      <category term="CSS选择器" scheme="https://pinbolei.cn/tags/CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
      <category term="CSS3属性" scheme="https://pinbolei.cn/tags/CSS3%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>常见的网页设计错误（上）</title>
    <link href="https://pinbolei.cn/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E9%94%99%E8%AF%AF%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://pinbolei.cn/常见的网页设计错误（上）/</id>
    <published>2018-12-17T08:19:50.000Z</published>
    <updated>2019-05-06T07:45:12.720Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为翻译的原文 原文地址<a href="http://blog-en.tilda.cc/articles-website-design-mistakes" target="_blank" rel="noopener">http://blog-en.tilda.cc/articles-website-design-mistakes</a></p></blockquote><hr><a id="more"></a><h2 id="常见的登陆页面设计错误要避免"><a href="#常见的登陆页面设计错误要避免" class="headerlink" title="常见的登陆页面设计错误要避免"></a>常见的登陆页面设计错误要避免</h2><h3 id="1-内容不会分解为逻辑块"><a href="#1-内容不会分解为逻辑块" class="headerlink" title="1.内容不会分解为逻辑块"></a>1.内容不会分解为逻辑块</h3><p>如果将信息分组为逻辑块，则用户更容易摘要信息。将填充设置为120 px-180 px，并使用彩色背景分隔文本块。<br><img src="/常见的网页设计错误（上）/pic1.png?w_100" alt="1-1"><br><img src="/常见的网页设计错误（上）/pic2.png" alt="1-2"><br>图1-1，在相关信息集之间几乎没有填充，而且这种设计需要颜色块来将内容划分为逻辑集。结果，这些信息难以消化，并且不清楚哪个文本应该与每个块一起使用。<br>图1-2，充足够大，块被颜色分开，这使得一件事立即清楚 - 这些块包含不同类型的内容。</p><h3 id="2-网页上项目之间的空格不均匀"><a href="#2-网页上项目之间的空格不均匀" class="headerlink" title="2.网页上项目之间的空格不均匀"></a>2.网页上项目之间的空格不均匀</h3><p>应在逻辑块周围设置相同大小的空格。否则您的页面看起来会很混乱，用户可能不会对每个部分给予同等的考虑。<br><img src="/常见的网页设计错误（上）/pic3.png" alt="2-1"><br><img src="/常见的网页设计错误（上）/pic4.png" alt="2-2"><br>图2-1，各种宽度的空间看起来不均匀，并且会产生一种印象，即公司信息与标题相关联，尽管每个块都同样重要。<br>图2-2，标题周围的相同大小的空间和正文副本有助于将逻辑块视为携带同等重要的信息。</p><h3 id="3-填充太小意味着用户无法将内容分解为逻辑块"><a href="#3-填充太小意味着用户无法将内容分解为逻辑块" class="headerlink" title="3.填充太小意味着用户无法将内容分解为逻辑块"></a>3.填充太小意味着用户无法将内容分解为逻辑块</h3><p>为避免逻辑部分混入，请将它们分开并在它们之间插入一个大空间（至少120像素）。<br><img src="/常见的网页设计错误（上）/pic5.png" alt="3-1"><br><img src="/常见的网页设计错误（上）/pic6.png" alt="3-3"><br>图3-1，使用窄填充，组成站点的块彼此粘在一起。这会使页面超载并且非常混乱 - 网站访问者会认为这是一个纯文本，而不是具有不同含义的部分。<br>图3-2，填充足够大，因此可以立即看到这两个块之间的差异</p><h3 id="4-避免图像上文本复制的对比度低"><a href="#4-避免图像上文本复制的对比度低" class="headerlink" title="4.避免图像上文本复制的对比度低"></a>4.避免图像上文本复制的对比度低</h3><p>文本和背景之间应该有足够的对比。要使副本突出，请在图像上放置对比度滤镜。黑色是一种流行的颜色，但您也可以使用鲜艳的颜色混合搭配。</p><p>另一种选择是从一开始就使用对比图像，并将副本放在照片的暗部分上。<br><img src="/常见的网页设计错误（上）/pic7.png" alt="4-1"><br>此图像太亮，这使得阅读文本副本太困难<br><img src="/常见的网页设计错误（上）/pic8.png" alt="4-2"><br>应用于照片的滤镜使复印件易于阅读</p><h3 id="5-一页上的样式太多"><a href="#5-一页上的样式太多" class="headerlink" title="5.一页上的样式太多"></a>5.一页上的样式太多</h3><p>一页上太多的排版和设计风格使它看起来不专业且难以阅读。要避免这种情况，请将自己限制为单个字体和两个饱和度选项，例如，普通和粗体。<br><img src="/常见的网页设计错误（上）/pic9.png" alt="5-1"><br><img src="/常见的网页设计错误（上）/pic10.png" alt="5-2"><br>图5-1，由于使用了太多的排版风格，目前还不清楚重点在哪里。<br>图5-2，一种字体，一种颜色和两种饱和度。页面上的排版看起来整洁明了。</p><h3 id="6-颜色块太窄"><a href="#6-颜色块太窄" class="headerlink" title="6.颜色块太窄"></a>6.颜色块太窄</h3><p>避免使用颜色强调窄页面元素。它看起来不太好看。例如，由于标题的大小，类型饱和度和填充，标题已经很好地标记。您想突出显示页面上的特定点吗？使用整个块的颜色背景，包括相关的标题和文本副本。<br><img src="/常见的网页设计错误（上）/pic11.png" alt="6-1"><br><img src="/常见的网页设计错误（上）/pic12.png" alt="6-2"><br>图6-1，放置在彩色背景上的标题打破了页面的连续性，看起来像是独立的独立元素。<br>图6-2，标题和相关文本都具有相同的背景。它表明它们属于同一个逻辑集。</p><h3 id="7-窄列内的文本复制太多"><a href="#7-窄列内的文本复制太多" class="headerlink" title="7.窄列内的文本复制太多"></a>7.窄列内的文本复制太多</h3><p>当窄列中有大量文本副本时，很难阅读，因为网站访问者必须从一行跳到下一行。另外，它看起来不太好看！最好减少列数并缩短文本副本，否则没有人会阅读它。<br><img src="/常见的网页设计错误（上）/pic13.png" alt="7-1"><br><img src="/常见的网页设计错误（上）/pic14.png" alt="7-2"><br>图7-1，很长的，有争议的专栏很难读。<br>图7-2，这些列中的文字很少，因此阅读它很容易。</p><h3 id="8-中心文本过多"><a href="#8-中心文本过多" class="headerlink" title="8.中心文本过多"></a>8.中心文本过多</h3><p> 当文本很少时，页面上的居中文本很有效，否则用户很难有效地浏览它。同时，从24像素开始增加字体大小。</p><p>如果您需要包含大量文本，请使用具有可折叠文本副本的块（在Tilda中，它的块为TX12，TX16N或按钮BF703）。<br><img src="/常见的网页设计错误（上）/pic15.png" alt="8-1"><br><img src="/常见的网页设计错误（上）/pic16.png" alt="8-2"><br>图8-1，长而居中的文本不易阅读。<br>图8-2，标题下的短文本（两者都居中）在页面上看起来很好。</p><h3 id="9-文本复制叠加在图像的基本部分上"><a href="#9-文本复制叠加在图像的基本部分上" class="headerlink" title="9.文本复制叠加在图像的基本部分上"></a>9.文本复制叠加在图像的基本部分上</h3><p>避免使用文本覆盖有意义的部分或图像的小细节。通过这种方式，您将使图像模糊不清并使文本难以辨认。尝试不同的线条位置，例如居中或对齐文字或垂直放置。<br><img src="/常见的网页设计错误（上）/pic17.png" alt="9-1"><br><img src="/常见的网页设计错误（上）/pic18.png" alt="9-2"><br>图9-1，这个标题妨碍了女人的脸。有这么多微小的细节，很难阅读文本。<br>图9-2，图像和文本副本易于阅读并形成良好的构图。</p><h3 id="10-滥用视觉层次结构"><a href="#10-滥用视觉层次结构" class="headerlink" title="10.滥用视觉层次结构"></a>10.滥用视觉层次结构</h3><p>为了使信息层次在页面上清晰可见，封面上的标题应该大于标题的其余部分或者至少相同的大小，例如，如果标题很长的话。<br><img src="/常见的网页设计错误（上）/pic19.png" alt="10-1"><br><img src="/常见的网页设计错误（上）/pic20.png" alt="10-2"><br>图10-1，标题上的标题不成比例地小于下一个标题，这令人困惑。为什么？它使第二个标题显得更加突出。<br>图10-2，标题上的标题大于下一个块中的标题，因此整个页面看起来一致。</p><p>相同的原理适用于逻辑块内的可视层次结构。标题应该是页面上最大的设计元素，然后是较小的，不太突出的子标题。接下来，随后的功能标题应明显小于标题，并且重量相同。最小的字体应该用于功能描述。</p><p>这将有助于网站访问者区分最重要和最不重要的信息。<br><img src="/常见的网页设计错误（上）/pic21.png" alt="10-3"><br><img src="/常见的网页设计错误（上）/pic22.png" alt="10-4"><br>图10-3，标题比标题更小，看起来是次要的，尽管在这种情况下它更重要。<br>图10-4，标题是页面上最突出的元素，虽然标题以较小的类型书写，但它们仍然清晰可见。</p><h3 id="11-一个逻辑集分为两个"><a href="#11-一个逻辑集分为两个" class="headerlink" title="11.一个逻辑集分为两个"></a>11.一个逻辑集分为两个</h3><p>跟随文本的全屏图像或图库类似于单独的独立块。如果在图库周围添加填充，由于共享背景，文本副本和图像看起来都是逻辑整体。<br><img src="/常见的网页设计错误（上）/pic23.png" alt="11-1"><br><img src="/常见的网页设计错误（上）/pic24.png" alt="11-2"><br>图11-1，一个全屏画廊看起来与上面的标题脱节，看起来像一个独立的块。<br>图11-2，画廊与它上方的标题共享相同的背景，这使得整个构图看起来很稳固。</p><h3 id="12-标题太大而且很长"><a href="#12-标题太大而且很长" class="headerlink" title="12.标题太大而且很长"></a>12.标题太大而且很长</h3><p>非常大的字体非常适合短句。如果标题很长，请使用较小尺寸的字体。它易于阅读，并为页面上的所有其他设计元素留出足够的空间。<br><img src="/常见的网页设计错误（上）/pic25.png" alt="12-1"><br><img src="/常见的网页设计错误（上）/pic26.png" alt="12-2"><br>图12-1，标题太大占据整个封面，而设计元素争夺空间，标题难以阅读。<br>图12-2，这个页面组合得很好，所有的设计元素都相互平衡，副本很容易阅读。</p><h3 id="13-错误地使用边框样式的按钮"><a href="#13-错误地使用边框样式的按钮" class="headerlink" title="13.错误地使用边框样式的按钮"></a>13.错误地使用边框样式的按钮</h3><p>当按钮透明时，边框是必需的。为颜色按钮添加边框没有意义，它只是另一个无意义的设计功能，它会使页面过载并使其难以阅读。<br><img src="/常见的网页设计错误（上）/pic27.png" alt="13-1"></p><h3 id="14-使用太多颜色"><a href="#14-使用太多颜色" class="headerlink" title="14.使用太多颜色"></a>14.使用太多颜色</h3><p>在页面上使用太多颜色会令人困惑，并且不清楚哪些位更重要。一两种颜色足以让视觉突出显示真正重要的东西。<br><img src="/常见的网页设计错误（上）/pic28.png" alt="14-1"><br><img src="/常见的网页设计错误（上）/pic29.png" alt="14-2"><br>图14-1，页面上有太多鲜艳的颜色; 这令人困惑。<br>图14-2，一种颜色的口音创造了多样性，并且不会分散页面内容。</p><h3 id="15-重载菜单"><a href="#15-重载菜单" class="headerlink" title="15.重载菜单"></a>15.重载菜单</h3><p>人们访问网站以找到解决问题的方法。帮助他们！使用菜单可以帮助人们浏览网站并快速轻松地找到他们需要的内容。请勿使用过多信息使其超载。这足以拥有5-7个菜单项。<br><img src="/常见的网页设计错误（上）/pic30.png" alt="15-1"><br>此菜单包含太多信息，使网站导航更加困难。</p><p><img src="/常见的网页设计错误（上）/pic31.png" alt="15-2"><br>简单的菜单可以轻松找到您需要的东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文为翻译的原文 原文地址&lt;a href=&quot;http://blog-en.tilda.cc/articles-website-design-mistakes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog-en.tilda.cc/articles-website-design-mistakes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="网页设计" scheme="https://pinbolei.cn/categories/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="网页设计" scheme="https://pinbolei.cn/tags/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CSS3弹性盒和媒体查询、响应式布局</title>
    <link href="https://pinbolei.cn/CSS3%E5%BC%B9%E6%80%A7%E7%9B%92%E5%92%8C%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E3%80%81%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <id>https://pinbolei.cn/CSS3弹性盒和媒体查询、响应式布局/</id>
    <published>2018-12-10T02:24:07.000Z</published>
    <updated>2019-05-06T07:45:12.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CSS3弹性盒和媒体查询、响应式布局简介</p></blockquote><hr><a id="more"></a><h2 id="一、怪异盒模型的简介"><a href="#一、怪异盒模型的简介" class="headerlink" title="一、怪异盒模型的简介"></a>一、怪异盒模型的简介</h2><p><img src="/CSS3弹性盒和媒体查询、响应式布局/pic1.png" alt="图1-1&gt;"><br><img src="/CSS3弹性盒和媒体查询、响应式布局/pic2.png" alt="图1-2"></p><h2 id="二、弹性盒模型"><a href="#二、弹性盒模型" class="headerlink" title="二、弹性盒模型"></a>二、弹性盒模型</h2><p>Flexbox布局（Flexible Box）模块(目前处于W3C工作草案)旨在提供一个更佳有效的布局方式，更好的控制项目的对齐和自由分配容器空间，即使它们的大小是未知的或动态的。因此得其名”flex”。<br><br>Flex布局背后的主要思想<code>是给容器控制项目（Flex项目）的宽度、高度的能力，使用Flex项目可以自动填满容器的可用空间（主要是适应所有类型的显示设备和屏幕大小）。</code>Flex容器使用Flex项目可以自动放大与收缩，用来填补可用的空闲空间。<br><br><strong>注：Flexbox布局比较适合Web应用程序的一些小组件和小规模的布局，而Grid布局（网格单元格布局）更适合用于一些大规模的布局。</strong></p><blockquote><p>因为Flexbox是一个模块，而不是一个单一的属性，他涉及很多东西。其中有些概念是需要我们去理解的，比如“flex容器”–&gt;一些属于容器上的属性(父元素)；“flex项目”–&gt;一些属于容器子元素上的属性</p></blockquote><h2 id="三、Flex容器属性-添加在父级元素上的"><a href="#三、Flex容器属性-添加在父级元素上的" class="headerlink" title="三、Flex容器属性(添加在父级元素上的)"></a>三、Flex容器属性(添加在父级元素上的)</h2><h3 id="1）display：定义一个Flex容器，根据其取的值来决定是内联还是块。Flex容器会为其内容建立新的伸缩格式化上下文。"><a href="#1）display：定义一个Flex容器，根据其取的值来决定是内联还是块。Flex容器会为其内容建立新的伸缩格式化上下文。" class="headerlink" title="1）display：定义一个Flex容器，根据其取的值来决定是内联还是块。Flex容器会为其内容建立新的伸缩格式化上下文。"></a>1）display：定义一个Flex容器，根据其取的值来决定是内联还是块。Flex容器会为其内容建立新的伸缩格式化上下文。</h3><p>两种方式<br>`<br>display : flex</p><p>display : inline-flex</p><p>这样做将元素定义为弹性容器，其子元素即弹性子元素。</p><p>flex 值表示弹性容器为块级。占用一行。</p><p>inline-flex 值表示弹性容器为行内元素，可以多个元素并列在一行 。<br>`<br><img src="/CSS3弹性盒和媒体查询、响应式布局/pic3.png" alt="图3-1"></p><h3 id="2）flex-direction：创建方轴，从而定义Flex项目在Flex容器中放置的方向。"><a href="#2）flex-direction：创建方轴，从而定义Flex项目在Flex容器中放置的方向。" class="headerlink" title="2）flex-direction：创建方轴，从而定义Flex项目在Flex容器中放置的方向。"></a>2）flex-direction：创建方轴，从而定义Flex项目在Flex容器中放置的方向。</h3><p>Flexbox是一种单方向的布局概念。认为Flex项目主要排列方式要么是水平排列，要么是垂直列排列 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"><span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）flex-wrap：默认情况之下，Flex项目都尽可能在一行显示。你可以根据flex-wrap的属性值来改变，让Flex项目多行显示。方向在这也扮演了一个重要角度，决定新的一行堆放方向。"><a href="#3）flex-wrap：默认情况之下，Flex项目都尽可能在一行显示。你可以根据flex-wrap的属性值来改变，让Flex项目多行显示。方向在这也扮演了一个重要角度，决定新的一行堆放方向。" class="headerlink" title="3）flex-wrap：默认情况之下，Flex项目都尽可能在一行显示。你可以根据flex-wrap的属性值来改变，让Flex项目多行显示。方向在这也扮演了一个重要角度，决定新的一行堆放方向。"></a>3）flex-wrap：默认情况之下，Flex项目都尽可能在一行显示。你可以根据flex-wrap的属性值来改变，让Flex项目多行显示。方向在这也扮演了一个重要角度，决定新的一行堆放方向。</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"><span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/CSS3弹性盒和媒体查询、响应式布局/pic4.png" alt="图4-1"></p><h3 id="4）flex-flow-适用于flex容器元素-："><a href="#4）flex-flow-适用于flex容器元素-：" class="headerlink" title="4）flex-flow(适用于flex容器元素)："></a>4）flex-flow(适用于flex容器元素)：</h3><p>这是<code>flex-direction</code>和<code>flex-wrap</code>两个属性的缩写。两个属性决定了伸缩容器的主轴与侧轴。默认值是<code>row nowrap（中间用空格隔开）</code>。<br><br><strong>语法</strong>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-flow: &lt;‘flex-direction’&gt; || &lt;‘flex-wrap’&gt;</span><br></pre></td></tr></table></figure><h3 id="5）justify-content：设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式"><a href="#5）justify-content：设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式" class="headerlink" title="5）justify-content：设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式"></a>5）justify-content：设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">justify-content：flex-start | flex-end | center | space-between | space-around</span><br></pre></td></tr></table></figure><p>当弹性盒里一行上的所有子元素都不能伸缩或已经达到其最大值时，这一属性可协助对多余的空间进行分配。当元素溢出某行时，这一属性同样会在对齐上进行控制 </p><p><img src="/CSS3弹性盒和媒体查询、响应式布局/pic5.png" alt="图5-1"></p><p><img src="/CSS3弹性盒和媒体查询、响应式布局/pic6.png" alt="图5-2"></p><h3 id="6）align-items：定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。"><a href="#6）align-items：定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。" class="headerlink" title="6）align-items：定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。"></a>6）align-items：定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">align-items： flex-start | flex-end | center | baseline(项目位于容器的基线上) | stretch(默认值。);</span><br></pre></td></tr></table></figure><p>伸缩项目可以在伸缩容器的当前行的侧轴上进行对齐，这类似于justify-content属性，但是是另一个方向。align-items可以用来设置伸缩容器中包括匿名伸缩项目的所有项目的对齐方式。<br><img src="/CSS3弹性盒和媒体查询、响应式布局/pic7.png" alt="图6-1"><br><img src="/CSS3弹性盒和媒体查询、响应式布局/pic8.png" alt="图6-2"></p><h3 id="7）align-content："><a href="#7）align-content：" class="headerlink" title="7）align-content："></a>7）align-content：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">align-content：flex-start |flex-end|center|space-between|space-around | stretch</span><br></pre></td></tr></table></figure><p>当伸缩容器的侧轴还有多余空间时，align-content属性可以用来调准伸缩行在伸缩容器里的对齐方式，这与调准伸缩项目在主轴上对齐方式的justify-content属性类似。请注意本属性在只有一行的伸缩容器上没有效果。</p><p> <img src="/CSS3弹性盒和媒体查询、响应式布局/pic9.png" alt="图7-1"></p><p><img src="/CSS3弹性盒和媒体查询、响应式布局/pic10.png" alt="图7-2"></p><h2 id="四、Flex项目属性-添加在子元素上的"><a href="#四、Flex项目属性-添加在子元素上的" class="headerlink" title="四、Flex项目属性(添加在子元素上的)"></a>四、Flex项目属性(添加在子元素上的)</h2><h3 id="1）order：：用整数值来定义排列顺序，数值小的排在前面。可以为负值。"><a href="#1）order：：用整数值来定义排列顺序，数值小的排在前面。可以为负值。" class="headerlink" title="1）order：：用整数值来定义排列顺序，数值小的排在前面。可以为负值。"></a>1）order：<integer>：用整数值来定义排列顺序，数值小的排在前面。可以为负值。</integer></h3><p>默认情况，Flex项目是按文档源的流顺序排列。然而，在Flex容器中可以通过order属性来控制Flex项目的顺序源。设置或检索弹性盒模型对象的子元素出現的順序。<br></p><p>order定义将会影响 &lt;’ position ‘&gt; 值为static元素的层叠级别，数值小的会被数值大的盖住。</p><p><img src="/CSS3弹性盒和媒体查询、响应式布局/pic11.png" alt="图1-1"><br><img src="/CSS3弹性盒和媒体查询、响应式布局/pic12.png" alt="图1-2"></p><h3 id="2）flex-grow：number该属性控制flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。"><a href="#2）flex-grow：number该属性控制flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。" class="headerlink" title="2）flex-grow：number该属性控制flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。"></a>2）flex-grow：number该属性控制flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。</h3><p>该属性控制flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。如果所有Flex项目的flex-grow设置为1时，表示Flex容器中的Flex项目具有相等的尺寸。如果你给其中一个Flex项目设置flex-grow的值为2，那么这个Flex项目的尺寸将是其他Flex项目两倍（其他Flex项目的flex-grow值为1）。<code>注意：flex-grow取负值将失效。</code><br><img src="/CSS3弹性盒和媒体查询、响应式布局/pic13.png" alt="图2-1"></p><h3 id="3）flex-shrink：设置或检索弹性盒的收缩比率"><a href="#3）flex-shrink：设置或检索弹性盒的收缩比率" class="headerlink" title="3）flex-shrink：设置或检索弹性盒的收缩比率"></a>3）flex-shrink：<number>设置或检索弹性盒的收缩比率</number></h3><p>根据弹性盒子元素所设置的收缩因子作为比率来收缩空间。注意：flex-shrink取负值将失效。</p><p><img src="/CSS3弹性盒和媒体查询、响应式布局/pic14.png" alt="图3-1"></p><h3 id="4）flex-basis-auto-content"><a href="#4）flex-basis-auto-content" class="headerlink" title="4）flex-basis: |  | auto | content"></a>4）flex-basis:<length> | <percentage> | auto | content</percentage></length></h3><p><code>设置或检索弹性盒伸缩基准值</code>。如果所有子元素的基准值之和大于剩余空间，则会根据每项设置的基准值，按比率伸缩剩余空间。<br><br>如果设置为0，内容不在考虑周围额外空间。如果设置为auto，额外空间会基于flex-grow值做分布。如下图所示：<br><br><img src="/CSS3弹性盒和媒体查询、响应式布局/pic15.png" alt="图4-1"></p><h3 id="5）flex：none-lt-’-flex-grow-‘-gt-lt-’-flex-shrink-gt-’-lt-’-flex-basis-‘-gt"><a href="#5）flex：none-lt-’-flex-grow-‘-gt-lt-’-flex-shrink-gt-’-lt-’-flex-basis-‘-gt" class="headerlink" title="5）flex：none | &lt;’ flex-grow ‘&gt; &lt;’ flex-shrink &gt;’? || &lt;’ flex-basis ‘&gt;"></a>5）flex：none | &lt;’ flex-grow ‘&gt; &lt;’ flex-shrink &gt;’? || &lt;’ flex-basis ‘&gt;</h3><p><strong>复合属性。设置或检索弹性盒模型对象的子元素如何分配空间。</strong></p><p>flex是flex-grow，flex-shrink和flex-basis三个属性的缩写。第二个和第三个参数(flex-shrink和flex-basis)是可选值。其默认值是0 1 auto。<br>`<br>如果缩写「flex: 1」, 则其计算值为「1 1 0%」</p><p>如果缩写「flex: auto」, 则其计算值为「1 1 auto」</p><p>如果「flex: none」, 则其计算值为「0 0 auto」</p><p>如果「flex: 0 auto」或者「flex: initial」, 则其计算值为「0 1 auto」，即「flex」初始值</p><p>`<br><img src="/CSS3弹性盒和媒体查询、响应式布局/pic16.png" alt="图5-1"></p><p><img src="/CSS3弹性盒和媒体查询、响应式布局/pic17.png" alt="图5-2"></p><h3 id="6）align-self：auto-flex-start-flex-end-center-baseline-stretch"><a href="#6）align-self：auto-flex-start-flex-end-center-baseline-stretch" class="headerlink" title="6）align-self：auto | flex-start | flex-end | center | baseline | stretch"></a>6）align-self：auto | flex-start | flex-end | center | baseline | stretch</h3><p>定义flex子项单独在侧轴（纵轴）方向上的对齐方式。<br><strong>注意：float，clear和vertical-align属性在Flex项目中无效。</strong><br><img src="/CSS3弹性盒和媒体查询、响应式布局/pic18.png" alt="图6-1"></p><p><img src="/CSS3弹性盒和媒体查询、响应式布局/pic19.png" alt="图6-2"></p><h2 id="五、媒体查询的概念和应用"><a href="#五、媒体查询的概念和应用" class="headerlink" title="五、媒体查询的概念和应用"></a>五、媒体查询的概念和应用</h2><h3 id="1）媒体查询的引用方法"><a href="#1）媒体查询的引用方法" class="headerlink" title="1）媒体查询的引用方法"></a>1）媒体查询的引用方法</h3><p>在实际中媒体类型有近10中之多，实际常用的也就那么几种。不同的媒体类型引用方法也是有很多的，常见的媒体类型的引用主要有：link标签、xml方式、@import和css3新增的@import几种。</p><h4 id="1、-link方法："><a href="#1、-link方法：" class="headerlink" title="1、 link方法："></a>1、 link方法：</h4><p>link方法引入类型其实就是在<link>标签引入样式的时候，通过link标签中的media属性来制定不同的媒体类型，这种方式引入媒体类型时常跟着引用的样式文件走。如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"print.css"</span> <span class="attr">media</span>=<span class="string">"print"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、-media方式"><a href="#2、-media方式" class="headerlink" title="2、 @media方式"></a>2、 @media方式</h4><p>@media是css3中新引进的一个特性，被称为媒体查询。在页面中也可以通过这个属性来引入媒体查询，它和@import有点类似，也是具有2中方式</p><p>A：在样式文件中引入媒体类型：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@media screen&#123; 选择器&#123; 你的样式代码 &#125; &#125;</span><br></pre></td></tr></table></figure><p>B：使用@media 引入媒体类型的方式是在head标签中的style引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">@media screen&#123;选择器&#123;你的代码样式&#125;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）常用Media-query设备特性"><a href="#2）常用Media-query设备特性" class="headerlink" title="2）常用Media query设备特性"></a>2）常用Media query设备特性</h3><p><img src="/CSS3弹性盒和媒体查询、响应式布局/pic20.jpg" alt="图2-1"></p><h2 id="六、Responsive-web-design-响应式设计布局概念"><a href="#六、Responsive-web-design-响应式设计布局概念" class="headerlink" title="六、Responsive web design 响应式设计布局概念"></a>六、Responsive web design 响应式设计布局概念</h2><h3 id="1）Responsive-设计特点"><a href="#1）Responsive-设计特点" class="headerlink" title="1）Responsive 设计特点"></a>1）Responsive 设计特点</h3><p>Responsive 网页设计不但要考虑其元素布局的秩序，还要做到“有求必应”，因此需要满足三个条件。<br>`<br>1、网站必须建立灵活的网格基础；</p><p>2、引用到网站的图片必须是可伸缩的；</p><p>3、不同的显示风格，需要在Media Query上设置不同的样式<br>`<br><strong>注意：缺少任何一个功能，就不能称为是合格的Responsive 网页设计</strong></p><h3 id="2）Responsive-中的术语"><a href="#2）Responsive-中的术语" class="headerlink" title="2）Responsive 中的术语"></a>2）Responsive 中的术语</h3><h4 id="1、流体网格"><a href="#1、流体网格" class="headerlink" title="1、流体网格"></a>1、流体网格</h4><p>流体网格是一个简单的网格系统，这种网格设计参考了流体设计中的网格系统，将每个网格格子使用百分比单位<br>来控制网格大小，这种网格系统最大的好处就是让网格大小随时根据屏幕尺寸做出相对应的比例缩放。</p><h4 id="2、弹性图片"><a href="#2、弹性图片" class="headerlink" title="2、弹性图片"></a>2、弹性图片</h4><p>弹性图片指的是不给图片设置固定尺寸，而是根据流体网格进行缩放，用于适应各种网格的尺寸。而实现方法是<br><br>比较简单，一条代码就能确定 比如img{max-width：100%；}但是在IE8浏览器会出现图片失踪的bug，如果<br><br>我们给每个断点提供不同的图片是比较头疼的一件事情，所以我们可以使用：<br><br>`<br>1）、使用background-image给元素添加背景图片</p><p>2）、显示/隐藏父元素，给父元素使用不同的图片，然后通过media query来控制这些图片显示或者隐藏<br>`</p><h4 id="3、媒体查询"><a href="#3、媒体查询" class="headerlink" title="3、媒体查询"></a>3、媒体查询</h4><p>媒体查询可以根据设备的尺寸，查询出适配的样式，使用这个属性可以根据用户终端设备适配对<br>应的样式，Responsive 设计最关注的的是根据用户的使用设备的当前宽度，web页面将加载一个备用的样式，<br>实现特定的页面风格</p><h4 id="4、屏幕分辨率"><a href="#4、屏幕分辨率" class="headerlink" title="4、屏幕分辨率"></a>4、屏幕分辨率</h4><p>指的是用户使用的设备浏览web页面时的分辨率，比如智能手机浏览器，移动电脑浏览器，平板<br>电脑浏览器和桌面浏览器。只有知道有哪种分辨率，才能调用对应的样式。</p><h4 id="5、主要断点："><a href="#5、主要断点：" class="headerlink" title="5、主要断点："></a>5、主要断点：</h4><p>简单来说就是设备宽度的临界点，媒体特性中min-width和max-width对应的属性值就是响应式<br>设计中的断点值，简单来说就是使用主要断点和次要断点，创建媒体查询的条件，而每个断点会对应一个样式文件。<br><br>设置断点要把握以下3个要点<br>`<br>1）、满足主要的断点</p><p>2）、有可能的话添加一些别的断点</p><p>3）、设置高于1024px的桌面断点。<br>`<br><img src="/CSS3弹性盒和媒体查询、响应式布局/pic21.png" alt="图5-1"></p><h3 id="3）Responsive-布局技巧"><a href="#3）Responsive-布局技巧" class="headerlink" title="3）Responsive 布局技巧"></a>3）Responsive 布局技巧</h3><p>`<br>1.尽量少用无关紧要的div</p><p>2.不要使用内联元素(inline)</p><p>3.尽量少用js或flash</p><p>4.丢去没用的绝对定位和浮动样式</p><p>5.屏弃任何冗余结构和不使用100%设置<br><code>那么有哪些设置能帮助Responsive确定更好的布局呢？</code><br>1.使用HTML5 Doctype和相关指南</p><p>2.重置好你的样式（reset.css）</p><p>3.一个简单的有语义的核心布局</p><p>4.给重要的网页元素使用简单的技巧，比如导航菜单之类元素<br>`</p><h3 id="4）Meta-标签定义"><a href="#4）Meta-标签定义" class="headerlink" title="4）Meta 标签定义"></a>4）Meta 标签定义</h3><p>为了让智能手机根据媒体查询匹配对应的样式，特意添加了一个特殊的meta标签。主要作用就是让智能手机浏览网页时能进行优化，并且可以自定义可视区域的尺寸和缩放级别。<br><br>设置Meta标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name="viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>这段代码的几个参数解释</strong>：</p><blockquote><p>width = device-width：宽度等于当前设备的宽度<br>initial-scale： 初始的缩放比例（默认设置为1.0）<br>minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）<br>maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）<br>user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面）</p></blockquote><h3 id="常见的一些网页布局单位"><a href="#常见的一些网页布局单位" class="headerlink" title="常见的一些网页布局单位"></a>常见的一些网页布局单位</h3><p><code>px：绝对单位，页面按精确像素展示</code><br></p><p><code>em：相对单位，基准点为父节点字体的大小，如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。</code><br></p><p><code>rem：相对单位，可理解为”root em”, 相对根节点html的字体大小来计算，CSS3新加属性，chrome/firefox/IE9+支持。</code><br></p><p><code>(另外需注意chrome强制最小字体为12号，即使设置成 10px 最终都会显示成 12px，当把html的font-size设置成10px,子节点rem的计算还是以12px为基准，所以网上很多文章提到的将html的font-size设为10方便计算不是那么可取)。</code><br></p><p><code>rem在移动端应用可参考淘宝的页面http://m.taobao.com (html的font-size通过动态计算获取)</code><br></p><p><code>vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%。</code><br></p><p><code>vh：viewpoint height，视窗高度，1vh等于视窗高度的1%。</code><br></p><p><code>vmin：vw和vh中较小的那个。</code><br></p><p><code>vmax：vw和vh中较大的那个。</code><br></p><p><code>vw, vh, vmin, vmax：IE9+局部支持，chrome/firefox/safari/opera支持，iOS safari 8+支持，Android browser4.4+支持，chrome for android39支持</code></p><h2 id="七、CSS3多列布局"><a href="#七、CSS3多列布局" class="headerlink" title="七、CSS3多列布局"></a>七、CSS3多列布局</h2><blockquote><p>1、column-count：分栏的个数<br>2、column-width：分栏的宽度<br>3、column-gap：分栏的间距<br>4、column-rule：分栏的边框<br>5、column-span：all/1合并分栏 火狐不支持 </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CSS3弹性盒和媒体查询、响应式布局简介&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="css3" scheme="https://pinbolei.cn/categories/css3/"/>
    
    
      <category term="css3" scheme="https://pinbolei.cn/tags/css3/"/>
    
      <category term="弹性盒" scheme="https://pinbolei.cn/tags/%E5%BC%B9%E6%80%A7%E7%9B%92/"/>
    
      <category term="媒体查询" scheme="https://pinbolei.cn/tags/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="响应式布局" scheme="https://pinbolei.cn/tags/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML5简介</title>
    <link href="https://pinbolei.cn/HTML5%E7%AE%80%E4%BB%8B/"/>
    <id>https://pinbolei.cn/HTML5简介/</id>
    <published>2018-12-04T02:15:54.000Z</published>
    <updated>2019-05-06T07:45:12.676Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>H5标签 基础</p></blockquote><hr><a id="more"></a><h2 id="1、H5的浏览器兼容"><a href="#1、H5的浏览器兼容" class="headerlink" title="1、H5的浏览器兼容"></a>1、H5的浏览器兼容</h2><p>不同的浏览器显示的效果可能不一样。因为HTML5没有一个统一的标准，不同的浏览器解析时不一样的，现在还处于一个推广的阶段，但是大部分的时一样的</p><h2 id="2、H5新的文档声明"><a href="#2、H5新的文档声明" class="headerlink" title="2、H5新的文档声明"></a>2、H5新的文档声明</h2><h3 id="1）Html-4的文档声明"><a href="#1）Html-4的文档声明" class="headerlink" title="1）Html 4的文档声明"></a>1）Html 4的文档声明</h3><h3 id="2）Html-5的文档声明"><a href="#2）Html-5的文档声明" class="headerlink" title="2）Html 5的文档声明"></a>2）Html 5的文档声明</h3><p>在 HTML 4.01 中，DOCTYPE 声明引用 文档类型定义DTD（Document Type Definition)，因为 HTML 4.01 基于 SGML（标准通用标记语言，是一种定义电子文档结构和描述其内容的国际标准语言；）。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。<br>HTML5 不基于 SGML，所以不需要引用 DTD。<br><br><strong>提示：请始终向 HTML 文档添加 DOCTYPE 声明，这样浏览器才能获知文档类型。</strong></p><p>扩展：CSS盒子模型：CSS-标准盒模型 &amp; 怪异盒模型？<br></p><blockquote><p>CSS中Box model是分为两种: W3C标准 和 IE标准盒子模型。<br>大多数浏览器采用W3C标准模型，而IE中则采用Microsoft自己的标准。</p></blockquote><p>怪异模式是“部分浏览器在支持W3C标准的同时还保留了原来的解析模式”，怪异模式主要表现在IE内核的浏览器。<br><br>DOCTYPE缺失则在ie6，ie7，ie8下将会触发怪异模式（quirks 模式）。<br></p><p>当不对doctype进行定义时，会触发怪异模式。<br></p><blockquote><p>在标准模式下，一个块的总宽度= width + margin(左右) + padding(左右) + border(左右)<br>在怪异模式下，一个块的总宽度= width + margin(左右)（即width已经包含了padding和border值）</p></blockquote><h2 id="3、H5的特点"><a href="#3、H5的特点" class="headerlink" title="3、H5的特点"></a>3、H5的特点</h2><p>1）更简洁、但是在实际开发中要注意书写规范，利于后期维护<br><br>2）标签的语义化<br><br>扩展：语义化的重要性：<br>① 当页面加载失败的时候，还能够呈现出清晰的结构<br>② 有利于SEO优化，利于被搜索引擎收录（即便于网络爬虫的识别）<br>③ 在项目开发及维护时，语义化的也很大程度上降低开发难度，节省成本</p><h3 id="DIV-和新结构标签的区别和意义"><a href="#DIV-和新结构标签的区别和意义" class="headerlink" title="DIV 和新结构标签的区别和意义"></a>DIV 和新结构标签的区别和意义</h3><p>3）语法更宽松<br>4）多设备跨平台<br>5）自适应网页设计</p><h2 id="4、H5新增加的语义化标签"><a href="#4、H5新增加的语义化标签" class="headerlink" title="4、H5新增加的语义化标签"></a>4、H5新增加的语义化标签</h2><blockquote><p>header头标签 header.html header_noLogin.html<br>nav 导航标签<br>article 文章标签<br>aside 侧边栏导航<br>footer 页脚 footer.html<br>section 章节、页眉、栏目</p></blockquote><h3 id="1）section"><a href="#1）section" class="headerlink" title="1）section"></a>1）section</h3><p><code>表示内容区块,一般入章节、页眉、页脚或者页面中的其他部分。可以与h1-h6等元素结合起来使用，标示文档的结构</code></p><h3 id="2）article"><a href="#2）article" class="headerlink" title="2）article"></a>2）article</h3><p><code>表示页面中的一块与上下文不相关的独立内容，譬如博客中的一篇文章或者报纸中的一篇文章</code></p><h3 id="3）aside"><a href="#3）aside" class="headerlink" title="3）aside"></a>3）aside</h3><p><code>Aside表示acticle元素的内容之外的，与article元素的内容相关的辅助信息。</code></p><h3 id="4）header"><a href="#4）header" class="headerlink" title="4）header"></a>4）header</h3><p><code>表示页面中一个内容区块或者整个页面的标题</code></p><h3 id="5）footer"><a href="#5）footer" class="headerlink" title="5）footer"></a>5）footer</h3><p><code>表示整个页面或者页面中的一个内容区块的脚注。一般来说，他会包含创作者的姓名、创作日期以及创作者联系信息。</code></p><h3 id="6）nav"><a href="#6）nav" class="headerlink" title="6）nav"></a>6）nav</h3><p><code>表示页面中导航链接的部分、① 传统的导航条 ② 腾讯新闻 ③侧边栏导航 ④内业导航    ：百度百科    ⑤翻页操作</code></p><h3 id="7）figure"><a href="#7）figure" class="headerlink" title="7）figure"></a>7）figure</h3><p>表示一段独立的流内容，一般表示文档主体流内容中的一个独立单元。规定独立的流内容（图像、图表、照片、代码等等）。使用figcaption元素为figure元素添加标题。</p><p>◆ figure 是一种元素的组合，带有可选 标题。用来表示网页上一块独立的内容。figure 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。<br>◆ figcaption 表示 figure 的标题。从属于 figure ， 并且， figure 中只能放置一个 figcaption</p><h3 id="8）video"><a href="#8）video" class="headerlink" title="8）video"></a>8）video</h3><p>定义视频，比如电影片段或其他视频流<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"路径地址"</span> <span class="attr">controls</span>&gt;</span>您的浏览器不支持video<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--video允许有多个source元素，source元素可以连接不同的视频文件，浏览器将使用第一个可识别的格式进行播放--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>/&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video.webm"</span>  <span class="attr">type</span>=<span class="string">"video/webm"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--提示：可以在开始标签和结束标签之间放置文本内容，这样老的浏览器就可以显示出不支持该标签的信息。--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--param 元素允许您为插入 XHTML 文档的对象规定 run-time 设置，也就是说，此标签可为包含它的 &lt;object&gt; 标签提供参数。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"BorderStyle"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span>   name 定义参数的名称（用在脚本中）。</span><br></pre></td></tr></table></figure></p><p>HTML5里video标签支持哪些格式的视频文件？</p><blockquote><p>Ogg:带有Threora视频编码和Vorbis音频编码的Ogg文件；<br>MPEG4：带有H.264视频编码和AAC音频编码的MPEG4文件；<br>WebM：带有VP8视频编码和Vorbis音频编码的WebM文件</p></blockquote><h3 id="9）embed"><a href="#9）embed" class="headerlink" title="9）embed"></a>9）embed</h3><p><code>embed标签用于定义嵌套的内容，包括各种媒体，格式可以是midi、wav、AIFF、AU、MP3、Flash等</code></p><h3 id="10）audio"><a href="#10）audio" class="headerlink" title="10）audio"></a>10）audio</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义音频，比如音乐或其他音频流--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"someaudio.wav"</span>&gt;</span>您的浏览器不支持 audio 标签。<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong>：可以在开始标签和结束标签之间放置文本内容，这样老的浏览器就可以显示出不支持该标签的信息。</p><h3 id="11）mark"><a href="#11）mark" class="headerlink" title="11）mark"></a>11）mark</h3><p><code>高亮显示文字，一个比较典型的应用就是在搜索结果中向用户高亮显示搜索关键词。</code></p><h3 id="12）canvas"><a href="#12）canvas" class="headerlink" title="12）canvas"></a>12）canvas</h3><p>表示图形，比如图标和其他图像。这个元素本身没有行为，仅提供一块画布，但它把一个绘图API展现给客户端js，以使脚本能够把想绘制的东西绘制到这块画布上<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">“myCanvas”</span> <span class="attr">width</span>=<span class="string">“200”</span> <span class="attr">height</span>=<span class="string">“200”</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="13）Datalist"><a href="#13）Datalist" class="headerlink" title="13）Datalist"></a>13）Datalist</h3><p><code>datalist提供一个事先定义好的列表，通过id与input关联，当在input内输入时就会有自动完成（autocomplete）的功能，用户将会看见一个下拉列表供其选择。</code></p><h3 id="14）output"><a href="#14）output" class="headerlink" title="14）output"></a>14）output</h3><p>表示不同类型的输出，比如脚本的输出</p><blockquote><p>for：定义输出域相关的一个或多个元素。<br>form：定义输入字段所属的一个或多个表单。<br>name：定义对象的唯一名称。（表单提交时使用）</p></blockquote><h2 id="5、H5新增加的表单元素"><a href="#5、H5新增加的表单元素" class="headerlink" title="5、H5新增加的表单元素"></a>5、H5新增加的表单元素</h2><p><code>Search/tel/url/email/number/range/color/file/Datetime/date/month/week/time/datetime-local</code></p><h3 id="1）email"><a href="#1）email" class="headerlink" title="1）email"></a>1）email</h3><p><code>专门用来输入email地址的文本框,如果该文本框中内容不是email地址格式的，则不允许提交。但它不检查email地址是否存在。提交时可以为空，除非加上了required属性。 具有multiple属性，它允许在该文本框中输入一串以逗号分隔的email地址。</code></p><h3 id="2）url"><a href="#2）url" class="headerlink" title="2）url"></a>2）url</h3><p><code>url：专门用来输入URL地址的文本框。如果该文本框中内容不是URL地址格式的，则不允许提交。</code></p><h3 id="3）number"><a href="#3）number" class="headerlink" title="3）number"></a>3）number</h3><p><code>Number</code>：<code>专门用来输入数字的文本框。在提交时会检查其中的内容是否为数字，具有min、max、step的属性。</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">name</span>=<span class="string">“number1”</span>  <span class="attr">type</span>=<span class="string">“number”</span>  <span class="attr">value</span>=<span class="string">“25”</span>  <span class="attr">min</span>=<span class="string">“10”</span>  <span class="attr">max</span>=<span class="string">“100”</span>  <span class="attr">step</span>=<span class="string">“5”</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="4）range"><a href="#4）range" class="headerlink" title="4）range"></a>4）range</h3><p><code>是用来只允话输入一段范围内数值的文本框，它具有min属性与max属性，及step属性，可以指定每次拖动的步幅。</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--min--最小值,max--最大值,step----&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">name</span>=<span class="string">“range1”</span> <span class="attr">type</span>=<span class="string">“range”</span> <span class="attr">value</span>=<span class="string">“25”</span> <span class="attr">min</span>=<span class="string">“0”</span>  <span class="attr">max</span>=<span class="string">“100”</span>  <span class="attr">step</span>=<span class="string">“5”</span>    /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="5）date-pickers-date-month-week-time-datetime-datetime-local"><a href="#5）date-pickers-date-month-week-time-datetime-datetime-local" class="headerlink" title="5）date pickers (date, month, week, time, datetime, datetime-local)"></a>5）date pickers (date, month, week, time, datetime, datetime-local)</h3><blockquote><p>拥有多个可供选取日期和时间的新输入类型。 date - 选取日、月、年 Internet Explorer 或 Firefox 不支持 “month” 元素。<br>month - 选取月、年 Internet Explorer 或 Firefox 不支持 “month” 元素。<br>week - 选取周和年Internet Explorer 或 Firefox 不支持 “month” 元素。<br>time - 选取时间（小时和分钟）Internet Explorer 或 Firefox 不支持 “month” 元素。<br>datetime - 选取时间、日、月、年（UTC 时间）Internet Explorer、Firefox 或者 Chrome 不支持 “datetime 元素，Safari 中部分支持。Opera 12 以及更早的版本中完全支持。<br>datetime-local - 选取时间、日、月、年（本地时间）Internet Explorer 或 Firefox 不支持 “month” 元素。</p></blockquote><h4 id="注意，跟-input-标签设置样式一样，但是要设置标签中局部的样式不能实现。如改变日历的背景色，颜色框的按钮效果等，这些都不可以实现。"><a href="#注意，跟-input-标签设置样式一样，但是要设置标签中局部的样式不能实现。如改变日历的背景色，颜色框的按钮效果等，这些都不可以实现。" class="headerlink" title="注意，跟 input 标签设置样式一样，但是要设置标签中局部的样式不能实现。如改变日历的背景色，颜色框的按钮效果等，这些都不可以实现。"></a>注意，跟 input 标签设置样式一样，但是要设置标签中局部的样式不能实现。如改变日历的背景色，颜色框的按钮效果等，这些都不可以实现。</h4><h2 id="6、H5新增加的表单验证"><a href="#6、H5新增加的表单验证" class="headerlink" title="6、H5新增加的表单验证"></a>6、H5新增加的表单验证</h2><h3 id="1）placeholder"><a href="#1）placeholder" class="headerlink" title="1）placeholder"></a>1）placeholder</h3><p><code>placeholder属性：文本框处于未输入状态时文本框中显示的输入提示。</code></p><h3 id="2）autofocus"><a href="#2）autofocus" class="headerlink" title="2）autofocus"></a>2）autofocus</h3><p><code>autofocus属性：给文本框、选择框、或者按钮控件加上该属性，当打开页面时，该控件自动获得国标焦点，一个页面只能有一个。</code></p><h3 id="3）required"><a href="#3）required" class="headerlink" title="3）required"></a>3）required</h3><p><code>required属性：验证输入不能为空</code></p><h3 id="4）-list"><a href="#4）-list" class="headerlink" title="4） list"></a>4） list</h3><p><code>list属性：结合datalist元素使用</code></p><h3 id="5）-autocomplete"><a href="#5）-autocomplete" class="headerlink" title="5） autocomplete"></a>5） autocomplete</h3><p><code>autocomplete属性：注：表单元素要必须有name属性。输入富足和所用的自动完成功能，是一个节省输入时间，同时也十分方便的功能。只有三种：on/off/&quot;&quot;。on可是显示指定候补输入的数据列表，使用datalist元素与list属性提供候补输入的数据列表，自动完成时，可以讲该datalist元素中的数据作为候补输入的数据在文本框中显示：</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"greeting"</span> <span class="attr">autoconplete</span>=<span class="string">"on"</span>  <span class="attr">list</span> =<span class="string">"greeting"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="HTML5增加了大量在提交时对表单及表单元素内容有效性验证的功能。"><a href="#HTML5增加了大量在提交时对表单及表单元素内容有效性验证的功能。" class="headerlink" title="HTML5增加了大量在提交时对表单及表单元素内容有效性验证的功能。"></a>HTML5增加了大量在提交时对表单及表单元素内容有效性验证的功能。</h4><h3 id="6）自动验证"><a href="#6）自动验证" class="headerlink" title="6）自动验证"></a>6）自动验证</h3><blockquote><p>min、max、step：为包含数字或日期的 input 类型规定限定（约束）<br>max: 最大值<br>min: 最小值<br>step: 数字间隔</p></blockquote><h3 id="7）取消验证"><a href="#7）取消验证" class="headerlink" title="7）取消验证"></a>7）取消验证</h3><p><code>novalidate 属性规定在提交表单时不应该验证 form 或 input 域。</code></p><blockquote><p>注：novalidate 属性适用于 form以及以下类型的 input标签：text, search, url, telephone, email, password, date pickers, range 以及 color.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;H5标签 基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="HTML5" scheme="https://pinbolei.cn/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="https://pinbolei.cn/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>VScode如何在浏览器中打开html文件</title>
    <link href="https://pinbolei.cn/VScode%E5%A6%82%E4%BD%95%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E6%89%93%E5%BC%80html%E6%96%87%E4%BB%B6/"/>
    <id>https://pinbolei.cn/VScode如何在浏览器中打开html文件/</id>
    <published>2018-12-03T07:55:35.000Z</published>
    <updated>2019-05-06T07:45:12.678Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vscode默认是在控制台下查看html文件，对于我们查看和调试都很不方便，那如何在浏览器中打开呢？</p></blockquote><hr><a id="more"></a><h3 id="1-新建一个HTML文件"><a href="#1-新建一个HTML文件" class="headerlink" title="1.新建一个HTML文件"></a>1.新建一个HTML文件</h3><p><img src="/VScode如何在浏览器中打开html文件/p1.png" alt="图1"></p><h3 id="2-点击左侧的扩展，打开扩展栏"><a href="#2-点击左侧的扩展，打开扩展栏" class="headerlink" title="2.点击左侧的扩展，打开扩展栏"></a>2.点击左侧的扩展，打开扩展栏</h3><p><img src="/VScode如何在浏览器中打开html文件/p2.png" alt="图2"></p><h3 id="3-在扩展栏的搜索栏中输入open-in-browser，找到open-in-browser这款插件，点击右下角“安装”字样即可安装。"><a href="#3-在扩展栏的搜索栏中输入open-in-browser，找到open-in-browser这款插件，点击右下角“安装”字样即可安装。" class="headerlink" title="3.在扩展栏的搜索栏中输入open in browser，找到open in browser这款插件，点击右下角“安装”字样即可安装。"></a>3.在扩展栏的搜索栏中输入open in browser，找到open in browser这款插件，点击右下角“安装”字样即可安装。</h3><p>因为我已经安装了，所以再搜索不会显示安装字样<br><img src="/VScode如何在浏览器中打开html文件/p3.png" alt="图3"></p><h3 id="4-安装完成后可以看一下这款插件的扩展文档，里面有插件的各种信息，及插件的使用方式等"><a href="#4-安装完成后可以看一下这款插件的扩展文档，里面有插件的各种信息，及插件的使用方式等" class="headerlink" title="4.安装完成后可以看一下这款插件的扩展文档，里面有插件的各种信息，及插件的使用方式等"></a>4.安装完成后可以看一下这款插件的扩展文档，里面有插件的各种信息，及插件的使用方式等</h3><p>我们可以看到在默认浏览器中打开是：<code>Alt + B</code>，在其他浏览器中显示是：<code>Shift+Alt+B</code><br><img src="/VScode如何在浏览器中打开html文件/p4.png" alt="图4"></p><h3 id="5-回到我们刚开始建的HTML文件，在文件中鼠标右键单击，在弹出的窗口中选择使用默认浏览器打开或者其他浏览器打开，也可以使用我们上面说的快捷键（Alt-B或Shift-Alt-B）打开。"><a href="#5-回到我们刚开始建的HTML文件，在文件中鼠标右键单击，在弹出的窗口中选择使用默认浏览器打开或者其他浏览器打开，也可以使用我们上面说的快捷键（Alt-B或Shift-Alt-B）打开。" class="headerlink" title="5.回到我们刚开始建的HTML文件，在文件中鼠标右键单击，在弹出的窗口中选择使用默认浏览器打开或者其他浏览器打开，也可以使用我们上面说的快捷键（Alt + B或Shift+Alt+B）打开。"></a>5.回到我们刚开始建的HTML文件，在文件中鼠标右键单击，在弹出的窗口中选择使用默认浏览器打开或者其他浏览器打开，也可以使用我们上面说的快捷键（<code>Alt + B</code>或<code>Shift+Alt+B</code>）打开。</h3><p><img src="/VScode如何在浏览器中打开html文件/p5.png" alt="图5"></p><h3 id="6-假如你想用其他浏览器打开，就选择Open-In-Other-Browsers（Shift-Alt-B，顶部会出现一个命令框，其中会显示可以使用的浏览器，选择自己需要的浏览器即可，在此，我们使用chrome打开。"><a href="#6-假如你想用其他浏览器打开，就选择Open-In-Other-Browsers（Shift-Alt-B，顶部会出现一个命令框，其中会显示可以使用的浏览器，选择自己需要的浏览器即可，在此，我们使用chrome打开。" class="headerlink" title="6.假如你想用其他浏览器打开，就选择Open In Other Browsers（Shift+Alt+B，顶部会出现一个命令框，其中会显示可以使用的浏览器，选择自己需要的浏览器即可，在此，我们使用chrome打开。"></a>6.假如你想用其他浏览器打开，就选择Open In Other Browsers（Shift+Alt+B，顶部会出现一个命令框，其中会显示可以使用的浏览器，选择自己需要的浏览器即可，在此，我们使用chrome打开。</h3><p><img src="/VScode如何在浏览器中打开html文件/p6.png" alt="图6-1"></p><p><img src="/VScode如何在浏览器中打开html文件/p7.png" alt="图6-2"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Vscode默认是在控制台下查看html文件，对于我们查看和调试都很不方便，那如何在浏览器中打开呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="VScode" scheme="https://pinbolei.cn/categories/VScode/"/>
    
    
      <category term="VScode" scheme="https://pinbolei.cn/tags/VScode/"/>
    
      <category term="打开html文件" scheme="https://pinbolei.cn/tags/%E6%89%93%E5%BC%80html%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue路由打开一个新的窗口</title>
    <link href="https://pinbolei.cn/vue%E8%B7%AF%E7%94%B1%E6%89%93%E5%BC%80%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E7%AA%97%E5%8F%A3/"/>
    <id>https://pinbolei.cn/vue路由打开一个新的窗口/</id>
    <published>2018-12-03T07:46:19.000Z</published>
    <updated>2019-05-08T09:14:05.773Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单说一下vue路由如何打开一个新的窗口</p></blockquote><hr><a id="more"></a><h3 id="router-link标签"><a href="#router-link标签" class="headerlink" title="router-link标签"></a>router-link标签</h3><p>在vue的官方文档中</p><p><img src="/vue路由打开一个新的窗口/图一.png" alt="图1-1"></p><p>看到这大家应该会想，既然<code>router-link</code>不支持<code>target=&quot;_blank&quot;</code>属性，那我们该怎么用<code>router-link</code>打开一个新的窗口呢？别急，继续往下看~</p><p>文档中还有一处描述<br><img src="/vue路由打开一个新的窗口/图二.png" alt="图1-2"></p><p><code>router-link</code>添加<code>tag=&quot;li&quot;</code>属性后，居然可以变成<code>li</code>标签渲染出来，真特么神奇哈，那可不可以写成<code>tag=&quot;a&quot;</code>,从而去替代a标签呢？我们尝试着写一下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">"a"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>新品<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编程导航"><a href="#编程导航" class="headerlink" title="编程导航"></a>编程导航</h3><p><img src="/vue路由打开一个新的窗口/图三.png" alt="图1-3"></p><p>上图是官网的最新说法，vue2.0以后<code>router.go</code>和<code>router.push</code>就不支持新窗口打开的属性了，现在用一种新的方式<code>router.resolve</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> routeData = <span class="keyword">this</span>.$router.resolve(&#123;</span><br><span class="line">  path: <span class="string">"/about"</span>,</span><br><span class="line">  query: &#123;</span><br><span class="line">    name:<span class="string">'lei'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    phoneNum:<span class="number">12345678901</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">window</span>.open(routeData.href, <span class="string">'_blank'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简单说一下vue路由如何打开一个新的窗口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="vue" scheme="https://pinbolei.cn/categories/vue/"/>
    
    
      <category term="router-link" scheme="https://pinbolei.cn/tags/router-link/"/>
    
      <category term="路由" scheme="https://pinbolei.cn/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>前端vue项目国际化——vue-i18n</title>
    <link href="https://pinbolei.cn/%E5%89%8D%E7%AB%AFvue%E9%A1%B9%E7%9B%AE%E5%9B%BD%E9%99%85%E5%8C%96%E2%80%94%E2%80%94vue-i18n/"/>
    <id>https://pinbolei.cn/前端vue项目国际化——vue-i18n/</id>
    <published>2018-12-03T06:01:33.000Z</published>
    <updated>2019-05-08T09:25:39.306Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有时候我们的项目需要支持多种语言，切换语言设置时，就自动切换整个项目的文字显示。</p></blockquote><hr><a id="more"></a><h3 id="安装-vue-i18n"><a href="#安装-vue-i18n" class="headerlink" title="安装 vue-i18n"></a>安装 vue-i18n</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// npm 安装</span><br><span class="line">npm install vue-i18n</span><br><span class="line"></span><br><span class="line">// script 引入</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-i18n/dist/vue-i18n.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在 main.js 中引入 vue-i18n<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">'vue-i18n'</span>;</span><br><span class="line">Vue.use(VueI18n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">    locale: <span class="string">'zh-CN'</span>,    <span class="comment">// 语言标识</span></span><br><span class="line">    <span class="comment">// this.$i18n.locale // 通过切换locale的值来实现语言切换</span></span><br><span class="line">    messages: &#123;</span><br><span class="line">      <span class="string">'zh-CN'</span>: <span class="built_in">require</span>(<span class="string">'./languages/lang/zh'</span>),   <span class="comment">// 中文语言包</span></span><br><span class="line">      <span class="string">'en-US'</span>: <span class="built_in">require</span>(<span class="string">'./languages/lang/en'</span>)    <span class="comment">// 英文语言包</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  i18n,  <span class="comment">// 把 i18n 挂载到 vue 根实例上</span></span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>上面即是将 vue-i18n 引入 vue 项目中，引入以后，实现国际化，当然至少需要两种语言，我们假设需要中英文两种语言切换，那么我们就需要中英两套语言的文件，只需要两个 js 文件，通过 require 的形式引入到 main.js。</p><p><strong>项目下新增一个目录languages</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---src</span><br><span class="line">    --languages</span><br><span class="line">       --lang</span><br><span class="line">          -- zh.js // 中文语言包</span><br><span class="line">          -- en.js // 英文语言包</span><br><span class="line">          -- .. // 其他语言，暂未实践</span><br></pre></td></tr></table></figure></p><p><code>zh</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> m = &#123;</span><br><span class="line">    common: &#123;</span><br><span class="line">        message: <span class="string">'消息'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    xxx: &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>en</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> m = &#123;</span><br><span class="line">    common: &#123;</span><br><span class="line">        message: <span class="string">'Messages'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    xxx: &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据渲染"><a href="#数据渲染" class="headerlink" title="数据渲染"></a>数据渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    // v-text</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"$t('m.common.message')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    // &#123;&#123;&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$t('m.common.message')&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">$t('m.common.message')</span><br></pre></td></tr></table></figure><h3 id="语言切换"><a href="#语言切换" class="headerlink" title="语言切换"></a>语言切换</h3><p>如何实现中英文的切换呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">locale: <span class="string">'zh-CN'</span>,    <span class="comment">// 语言标识</span></span><br><span class="line">    messages: &#123;</span><br><span class="line">      <span class="string">'zh-CN'</span>: <span class="built_in">require</span>(<span class="string">'./languages/lang/zh'</span>),   <span class="comment">// 中文语言包</span></span><br><span class="line">      <span class="string">'en-US'</span>: <span class="built_in">require</span>(<span class="string">'./languages/lang/en'</span>)    <span class="comment">// 英文语言包</span></span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>在main.js中，我们可以发现，当locale的值为<code>zh-CN</code>时，当前语言为中文，当locale的值为<code>en-US</code>时，当前语言为英文。</p><p>我们可以做一个切换按钮，点击来实现切换中英文。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击事件，切换语言</span></span><br><span class="line">switchLang () &#123;</span><br><span class="line">  <span class="keyword">this</span>.$confirm(<span class="string">'您确定切换语言吗?'</span>, <span class="string">'提示'</span>, &#123;</span><br><span class="line">       confirmButtonText: <span class="string">'确定'</span>,</span><br><span class="line">       cancelButtonText: <span class="string">'取消'</span>,</span><br><span class="line">       type: <span class="string">'warning'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">const</span> locale = <span class="keyword">this</span>.$i18n.locale;</span><br><span class="line">       locale === <span class="string">'zh-CN'</span> ? <span class="keyword">this</span>.$i18n.locale = <span class="string">'en-US'</span> : <span class="keyword">this</span>.$i18n.locale = <span class="string">'zh-CN'</span>;</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">           type: <span class="string">'info'</span>,</span><br><span class="line">       &#125;);          </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有时候我们的项目需要支持多种语言，切换语言设置时，就自动切换整个项目的文字显示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="vue" scheme="https://pinbolei.cn/categories/vue/"/>
    
    
      <category term="vue-i18n" scheme="https://pinbolei.cn/tags/vue-i18n/"/>
    
      <category term="国际化" scheme="https://pinbolei.cn/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Promise对象用法简介</title>
    <link href="https://pinbolei.cn/Promise%E5%AF%B9%E8%B1%A1%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>https://pinbolei.cn/Promise对象用法简介/</id>
    <published>2018-11-30T01:32:45.000Z</published>
    <updated>2019-05-08T09:26:02.418Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原自 阮一峰老师的 ECMAScript 6 入门</p></blockquote><hr><a id="more"></a><h2 id="什么是promise对象"><a href="#什么是promise对象" class="headerlink" title="什么是promise对象"></a>什么是promise对象</h2><ol><li><code>Promise</code>是异步编程的一种解决方案,ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。</li><li>从<code>Promise</code>对象可以获取异步操作的消息，<code>Promise</code>提供统一的 API，各种异步操作都可以用同样的方法进行处理。</li></ol><h2 id="Promise对象的特点"><a href="#Promise对象的特点" class="headerlink" title="Promise对象的特点"></a>Promise对象的特点</h2><ol><li>对象的状态不受外界影响。<code>Promise</code>对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从<code>pending</code>变为<code>fulfilled</code>和从<code>pending</code>变为<code>rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 <code>resolved</code>（已定型）。如果改变已经发生了，你再对<code>Promise</code>对象添加回调函数，也会立即得到这个结果。</li><li><strong><code>Promise</code>对象，可以将异步操作以同步操作的流程表达出来，避免层层嵌套的回调函数。此外，<code>Promise</code>对象提供统一的接口，使得控制异步操作更加容易。</strong></li></ol><h3 id="Promise也有一些缺点"><a href="#Promise也有一些缺点" class="headerlink" title="Promise也有一些缺点:"></a>Promise也有一些缺点:</h3><p><strong>首先，无法取消<code>Promise</code>，一旦新建它就会立即执行，无法中途取消。<br>其次，如果不设置回调函数，<code>Promise</code>内部抛出的错误，不会反应到外部。<br>第三，当处于<code>pending</code>状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</strong></p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6 规定，<code>Promise</code>对象是一个构造函数，用来生成<code>Promise</code>实例。<br>下面代码创造了一个<code>Promise</code>实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error); <span class="comment">// 异步操作失败</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><ul><li><code>resolve</code>函数的作用是，将<code>Promise</code>对象的状态从“<code>未完成</code>”变为“<code>成功</code>”（即从 <code>pending</code>变为 <code>resolved</code>），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</li><li><code>reject</code>函数的作用是，将<code>Promise</code>对象的状态从“<code>未完成</code>”变为“<code>失败</code>”（即从 <code>pending</code>变为<code>rejected</code>），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</li></ul><p><code>Promise</code>实例生成以后，可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是<code>Promise</code>对象的状态变为<code>resolved</code>时调用，第二个回调函数是<code>Promise</code>对象的状态变为<code>rejected</code>时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受<code>Promise</code>对象传出的值作为参数。</p><p>下面是一个<code>Promise</code>对象的简单例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span> (<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve,ms,<span class="string">'done'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">timeout(<span class="number">100</span>).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>上面代码中，<code>timeout</code>方法返回一个<code>Promise</code>实例，表示一段时间以后才会发生的结果。过了指定的时间（ms参数）以后，<code>Promise</code>实例的状态变为<code>resolved</code>，就会触发<code>then</code>方法绑定的回调函数。</p><p><strong><code>Promise</code>新建后就会立即执行。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,regect</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(resolve);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="comment">// Hi!</span></span><br><span class="line"><span class="comment">// resolved</span></span><br></pre></td></tr></table></figure></p><p>上面代码中，<code>Promise</code>新建后立即执行，所以首先输出的是<code>Promise</code>。然后，<code>then</code>方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行（因为<code>javascript</code>是单线程的），所以<code>resolved</code>最后输出。</p><p><strong>下面是异步加载图片的例子。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImageAsync</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">    image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(image);</span><br><span class="line">    &#125;;</span><br><span class="line">    image.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Could not load image at '</span> + url));</span><br><span class="line">    &#125;;</span><br><span class="line">    image.src = url;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码中，使用<code>Promise</code>包装了一个图片加载的异步操作。如果加载成功，就调用<code>resolve</code>方法，否则就调用<code>reject</code>方法。</p><p><strong>下面是一个用<code>Promise</code>对象实现的 Ajax 操作的例子。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    client.open(<span class="string">"GET"</span>, url);</span><br><span class="line">    client.onreadystatechange = handler;</span><br><span class="line">    client.responseType = <span class="string">"json"</span>;</span><br><span class="line">    client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    client.send();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Contents: '</span> + json);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'出错了'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>上面代码中，<code>getJSON</code>是对 XMLHttpRequest 对象的封装，用于发出一个针对 JSON 数据的 HTTP 请求，并且返回一个<code>Promise</code>对象。需要注意的是，在<code>getJSON</code>内部，<code>resolve</code>函数和<code>reject</code>函数调用时，都带有参数。</p><p>如果调用<code>resolve</code>函数和<code>reject</code>函数时带有参数，那么它们的参数会被传递给回调函数。<code>reject</code>函数的参数通常是<code>Error</code>对象的实例，表示抛出的错误；<code>resolve</code>函数的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  resolve(p1);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>上面代码中，<code>p1</code>和<code>p2</code>都是 Promise 的实例，但是<code>p2</code>的<code>resolve</code>方法将<code>p1</code>作为参数，即一个异步操作的结果是返回另一个异步操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原自 阮一峰老师的 ECMAScript 6 入门&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="ES6" scheme="https://pinbolei.cn/categories/ES6/"/>
    
    
      <category term="Promise" scheme="https://pinbolei.cn/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Axios-指南</title>
    <link href="https://pinbolei.cn/Axios-%E6%8C%87%E5%8D%97/"/>
    <id>https://pinbolei.cn/Axios-指南/</id>
    <published>2018-11-30T01:23:04.000Z</published>
    <updated>2019-05-08T09:26:45.367Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>分享一下axios的相关知识</p></blockquote><hr><a id="more"></a><h2 id="一、axios"><a href="#一、axios" class="headerlink" title="一、axios"></a>一、axios</h2><p>基于<code>promise</code>用于浏览器和<code>node.js</code>的http客户端</p><h2 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h2><ul><li>支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>能转换请求和响应数据</li><li>能取消请求</li><li>自动转换JSON数据</li><li>浏览器端支持防止CSRF(跨站请求伪造)</li></ul><h2 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h2><p><code>npm安装</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure></p><p><code>bower安装</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install axios</span><br></pre></td></tr></table></figure></p><p><code>cdn引入</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="四、例子"><a href="#四、例子" class="headerlink" title="四、例子"></a>四、例子</h2><p>1.发送一个<code>GET</code>请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过给定的ID来发送请求</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 以上请求也可以通过这种方式来发送</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>,&#123;</span><br><span class="line">  params:&#123;</span><br><span class="line">    ID:<span class="number">12345</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>2.发送一个<code>POST</code>请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>,&#123;</span><br><span class="line">  firstName: <span class="string">'Fred'</span>,</span><br><span class="line">  lastName: <span class="string">'Flintstone'</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>3.同时发起多个请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get (<span class="string">'/user/12345'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get (<span class="string">'/user/12345/permissions'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">axios.all([getUserAccount(),getUserPermissions()])</span><br><span class="line">  .then(axios.spread (<span class="function"><span class="keyword">function</span> (<span class="params">acct,perms</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当这两个请求都完成的时候会触发这个函数，两个参数分别代表返回的结果</span></span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure></p><h2 id="五、axios的API"><a href="#五、axios的API" class="headerlink" title="五、axios的API"></a>五、axios的API</h2><p><strong>（一）axios可以通过配置（<code>config</code>）来发送请求</strong><br>1.<code>axios(config)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送一个`POST`请求</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  url: <span class="string">'/user/12345'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取远程图片</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  method:<span class="string">'get'</span>,</span><br><span class="line">  url:<span class="string">'http://bit.ly/2mTM3nY'</span>,</span><br><span class="line">  responseType:<span class="string">'stream'</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  response.data.pipe(fs.createWriteStream(<span class="string">'ada_lovelace.jpg'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.<code>axios(url[, config])</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发起一个GET请求（GET是默认的请求方法）</span></span><br><span class="line">axios(<span class="string">'/user/12345'</span>);</span><br></pre></td></tr></table></figure><p><strong>（二）请求方法别名</strong><br>为了方便我们为所有支持的请求方法均提供了别名。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.request(url);</span><br><span class="line">axios.get(url[,config]);</span><br><span class="line">axios.delete(url[,config]);</span><br><span class="line">axios.head(url[,config]);</span><br><span class="line">axios.options(url[,config]);</span><br><span class="line">axios.post(url[,data[,config]]);</span><br><span class="line">axios.put(url[,data[,config]]);</span><br><span class="line">axios.patch(url[,data[,config]]);</span><br></pre></td></tr></table></figure></p><ul><li><strong>注意</strong>：当使用以上别名方法时，<code>url</code>，<code>method</code>和<code>data</code>等属性不用在config重复声明。</li></ul><p><strong>（三）同时发生的请求（Concurrency）</strong><br>以下两个用来处理同时发生多个请求的辅助函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iterable是一个可以迭代的参数,如数组等</span></span><br><span class="line">axios.all(iterable);</span><br><span class="line"><span class="comment">// callback要等到所有请求都完成才会执行</span></span><br><span class="line">axios.spread(callback)</span><br></pre></td></tr></table></figure></p><p><strong>（四）创建一个实例</strong><br>你可以创建一个拥有通用配置的<code>axios</code>实例<br>1.<code>axios.creat([config])</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = axios.cerate(&#123;</span><br><span class="line">  baseURL:<span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line">  timeout:<span class="number">1000</span>,</span><br><span class="line">  headers:&#123;<span class="string">'X-Custom-Header'</span>:<span class="string">'foobar'</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>2.实例的方法<br>以下是所有可用的实例方法，额外声明的配置将与利用create创建的实例配置合并<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios#request(config)</span><br><span class="line">axios#get(url[, config])</span><br><span class="line">axios#delete(url[, config])</span><br><span class="line">axios#head(url[, config])</span><br><span class="line">axios#options(url[, config])</span><br><span class="line">axios#post(url[, data[, config]])</span><br><span class="line">axios#put(url[, data[, config]])</span><br><span class="line">axios#patch(url[, data[, config]])</span><br></pre></td></tr></table></figure></p><h2 id="六、请求的配置（request-config）"><a href="#六、请求的配置（request-config）" class="headerlink" title="六、请求的配置（request config）"></a>六、请求的配置（request config）</h2><p>以下就是请求的配置选项，只有<code>url</code>选项是必须的，如果<code>method</code>选项未定义，那么它默认是以<code>GET</code>的方式发出请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `url`是请求的服务器地址</span></span><br><span class="line">  url:<span class="string">'/user'</span>,</span><br><span class="line">  <span class="comment">//`method`是请求资源的方式</span></span><br><span class="line">  method:<span class="string">'get'</span><span class="comment">//default</span></span><br><span class="line">  <span class="comment">//如果`url`不是绝对地址，那么`baseURL`将会加到`url`的前面</span></span><br><span class="line">  <span class="comment">//当`url`是相对地址的时候，设置`baseURL`会非常的方便</span></span><br><span class="line">  baseURL:<span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line">  <span class="comment">//`transformRequest`选项允许我们在请求发送到服务器之前对请求的数据做出一些改动</span></span><br><span class="line">  <span class="comment">//该选项只适用于以下请求方式：`put/post/patch`</span></span><br><span class="line">  <span class="comment">//数组里面的最后一个函数必须返回一个字符串、-一个`ArrayBuffer`或者`Stream`</span></span><br><span class="line">  transformRequest:[<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//在这里根据自己的需求改变数据</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">//`transformResponse`选项允许我们在数据传送到`then/catch`方法之前对数据进行改动</span></span><br><span class="line">  transformResponse:[<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//在这里根据自己的需求改变数据</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">//`headers`选项是需要被发送的自定义请求头信息</span></span><br><span class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>:<span class="string">'XMLHttpRequest'</span>&#125;,</span><br><span class="line">  <span class="comment">//`params`选项是要随请求一起发送的请求参数----一般链接在URL后面</span></span><br><span class="line">  <span class="comment">//他的类型必须是一个纯对象或者是URLSearchParams对象</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    ID:<span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//`paramsSerializer`是一个可选的函数，起作用是让参数（params）序列化</span></span><br><span class="line">  <span class="comment">//例如(https://www.npmjs.com/package/qs,http://api.jquery.com/jquery.param)</span></span><br><span class="line">  paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params,&#123;<span class="attr">arrayFormat</span>:<span class="string">'brackets'</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//`data`选项是作为一个请求体而需要被发送的数据</span></span><br><span class="line">  <span class="comment">//该选项只适用于方法：`put/post/patch`</span></span><br><span class="line">  <span class="comment">//当没有设置`transformRequest`选项时dada必须是以下几种类型之一</span></span><br><span class="line">  <span class="comment">//string/plain/object/ArrayBuffer/ArrayBufferView/URLSearchParams</span></span><br><span class="line">  <span class="comment">//仅仅浏览器：FormData/File/Bold</span></span><br><span class="line">  <span class="comment">//仅node:Stream</span></span><br><span class="line">  data &#123;</span><br><span class="line">    firstName:<span class="string">"Fred"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//`timeout`选项定义了请求发出的延迟毫秒数</span></span><br><span class="line">  <span class="comment">//如果请求花费的时间超过延迟的时间，那么请求会被终止</span></span><br><span class="line"></span><br><span class="line">  timeout:<span class="number">1000</span>,</span><br><span class="line">  <span class="comment">//`withCredentails`选项表明了是否是跨域请求</span></span><br><span class="line">  </span><br><span class="line">  withCredentials:<span class="literal">false</span>,<span class="comment">//default</span></span><br><span class="line">  <span class="comment">//`adapter`适配器选项允许自定义处理请求，这会使得测试变得方便</span></span><br><span class="line">  <span class="comment">//返回一个promise,并提供验证返回</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*..........*/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//`auth`表明HTTP基础的认证应该被使用，并提供证书</span></span><br><span class="line">  <span class="comment">//这会设置一个authorization头（header）,并覆盖你在header设置的Authorization头信息</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    username:<span class="string">"zhangsan"</span>,</span><br><span class="line">    password: <span class="string">"s00sdkf"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//返回数据的格式</span></span><br><span class="line">  <span class="comment">//其可选项是arraybuffer,blob,document,json,text,stream</span></span><br><span class="line">  responseType:<span class="string">'json'</span>,<span class="comment">//default</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>,<span class="comment">//default</span></span><br><span class="line">  xsrfHeaderName:<span class="string">'X-XSRF-TOKEN'</span>,<span class="comment">//default</span></span><br><span class="line">  <span class="comment">//`onUploadProgress`上传进度事件</span></span><br><span class="line">  onUploadProgress:<span class="function"><span class="keyword">function</span>(<span class="params">progressEvent</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//下载进度的事件</span></span><br><span class="line">onDownloadProgress:<span class="function"><span class="keyword">function</span>(<span class="params">progressEvent</span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//相应内容的最大值</span></span><br><span class="line">  maxContentLength:<span class="number">2000</span>,</span><br><span class="line">  <span class="comment">//`validateStatus`定义了是否根据http相应状态码，来resolve或者reject promise</span></span><br><span class="line">  <span class="comment">//如果`validateStatus`返回true(或者设置为`null`或者`undefined`),那么promise的状态将会是resolved,否则其状态就是rejected</span></span><br><span class="line">  validateStatus:<span class="function"><span class="keyword">function</span>(<span class="params">status</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt;<span class="number">300</span>;<span class="comment">//default</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//`maxRedirects`定义了在nodejs中重定向的最大数量</span></span><br><span class="line">  maxRedirects: <span class="number">5</span>,<span class="comment">//default</span></span><br><span class="line">  <span class="comment">//`httpAgent/httpsAgent`定义了当发送http/https请求要用到的自定义代理</span></span><br><span class="line">  <span class="comment">//keeyAlive在选项中没有被默认激活</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123;<span class="attr">keeyAlive</span>:<span class="literal">true</span>&#125;),</span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123;<span class="attr">keeyAlive</span>:<span class="literal">true</span>&#125;),</span><br><span class="line">  <span class="comment">//proxy定义了主机名字和端口号，</span></span><br><span class="line">  <span class="comment">//`auth`表明http基本认证应该与proxy代理链接，并提供证书</span></span><br><span class="line">  <span class="comment">//这将会设置一个`Proxy-Authorization` header,并且会覆盖掉已经存在的`Proxy-Authorization`  header</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host:<span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username:<span class="string">'skda'</span>,</span><br><span class="line">      password:<span class="string">'radsd'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//`cancelToken`定义了一个用于取消请求的cancel token</span></span><br><span class="line">  <span class="comment">//详见cancelation部分</span></span><br><span class="line">  cancelToken: <span class="keyword">new</span> cancelToken(<span class="function"><span class="keyword">function</span>(<span class="params">cancel</span>)</span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>作者：FunnySeeker<br>链接：<a href="https://www.jianshu.com/p/df464b26ae58" target="_blank" rel="noopener">https://www.jianshu.com/p/df464b26ae58</a><br>來源：简书</p></blockquote><h2 id="六、响应组成（请求返回的内容）"><a href="#六、响应组成（请求返回的内容）" class="headerlink" title="六、响应组成（请求返回的内容）"></a>六、响应组成（请求返回的内容）</h2><p>1.<code>response</code>由以下几部分信息组成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 服务端返回的数据</span></span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 服务端返回的状态码</span></span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line">  <span class="comment">// 服务端返回的状态信息</span></span><br><span class="line">  statusText: <span class="string">'OK'</span>,</span><br><span class="line">  <span class="comment">// 响应头,所有的响应头名称都是小写</span></span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line">  <span class="comment">// axios请求配置</span></span><br><span class="line">  config: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 请求</span></span><br><span class="line">  request: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.用<code>then</code>接收以下响应信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusText);</span><br><span class="line">    <span class="built_in">console</span>.log(response.headers);</span><br><span class="line">    <span class="built_in">console</span>.log(response.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><h2 id="七、默认配置"><a href="#七、默认配置" class="headerlink" title="七、默认配置"></a>七、默认配置</h2><p>1.<strong>全局修改axios默认配置</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">'https://api.example.com'</span>;</span><br><span class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure></p><p>2.<strong>自定义的实例默认设置</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建实例时修改配置</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://api.example.com'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 实例创建之后修改配置</span></span><br><span class="line">instance.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure></p><p>3.<strong>配置优先级</strong><br>配置项通过一定的规则合并，<code>request config</code>&gt; <code>instance.defaults</code>&gt; <code>系统默认</code>，优先级高的覆盖优先级低的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个实例，这时的超时时间为系统默认的 0</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create();</span><br><span class="line"><span class="comment">// 通过instance.defaults重新设置超时时间为2.5s，因为优先级比系统默认高</span></span><br><span class="line">instance.defaults.timeout = <span class="number">2500</span>;</span><br><span class="line"><span class="comment">// 通过request config重新设置超时时间为5s，因为优先级比instance.defaults和系统默认都高</span></span><br><span class="line">instance.get(<span class="string">'/longRequest'</span>, &#123;</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="八、拦截器"><a href="#八、拦截器" class="headerlink" title="八、拦截器"></a>八、拦截器</h2><p>1.你可以在<code>then</code>和<code>catch</code>之前拦截请求和响应。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加一个请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>2.移除拦截器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure></p><p>3.为axios实例添加一个拦截器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = axios.create();</span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="九、错误处理"><a href="#九、错误处理" class="headerlink" title="九、错误处理"></a>九、错误处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">      <span class="comment">// 发送请求后，服务端返回的响应码不是 2xx   </span></span><br><span class="line">      <span class="built_in">console</span>.log(error.response.data);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.status);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.headers);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.request) &#123;</span><br><span class="line">      <span class="comment">// 发送请求但是没有响应返回</span></span><br><span class="line">      <span class="built_in">console</span>.log(error.request);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 其他错误</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Error'</span>, error.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(error.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>可以用<code>validateStatus</code>定义一个http状态码返回的范围<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &lt; <span class="number">500</span>; <span class="comment">// Reject only if the status code is greater than or equal to 500</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="十、取消请求"><a href="#十、取消请求" class="headerlink" title="十、取消请求"></a>十、取消请求</h2><ul><li>你可以通过<code>cancel token</code>来取消一个请求<br>1.你可以通过<code>CancelToken.source</code>工厂函数来创建一个<code>cancel token</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ar CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">var</span> source = CancelToken.source();</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>,&#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">thrown</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(axios.isCancel(thrown))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Request canceled'</span>,thrown.message);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消请求（信息的参数可以设置的）</span></span><br><span class="line">source.cance(<span class="string">"操作被用户取消"</span>);</span><br></pre></td></tr></table></figure></li></ul><p>2.你可以给<code>cancelToken</code>构造函数传递一个<code>executor function</code>来创建一个<code>cancel token</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">var</span> cance;</span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>,&#123;</span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//这个executor函数接受一个cancel function作为参数</span></span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//取消请求</span></span><br><span class="line">cancel();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分享一下axios的相关知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="ES6" scheme="https://pinbolei.cn/categories/ES6/"/>
    
    
      <category term="axios" scheme="https://pinbolei.cn/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Element-ui自定义table表头，修改列标题样式、添加tooltip,:render-header使用简介</title>
    <link href="https://pinbolei.cn/Element-ui%E8%87%AA%E5%AE%9A%E4%B9%89table%E8%A1%A8%E5%A4%B4%EF%BC%8C%E4%BF%AE%E6%94%B9%E5%88%97%E6%A0%87%E9%A2%98%E6%A0%B7%E5%BC%8F%E3%80%81%E6%B7%BB%E5%8A%A0tooltip-render-header%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://pinbolei.cn/Element-ui自定义table表头，修改列标题样式、添加tooltip-render-header使用简介/</id>
    <published>2018-11-29T08:22:39.000Z</published>
    <updated>2019-05-08T09:26:25.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Element-ui自定义table表头，修改列标题样式、添加tooltip,:render-header使用简介</p></blockquote><hr><a id="more"></a><h3 id="render-header"><a href="#render-header" class="headerlink" title="render-header"></a>render-header</h3><p>render-header在官方文档中的介绍是这样的：</p><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>render-header</td><td>列标题 Label 区域渲染使用的 Function</td><td>Function(h, { column, $index })</td><td>—</td><td>—</td></tr></tbody></table><h3 id="修改列标题样式"><a href="#修改列标题样式" class="headerlink" title="修改列标题样式"></a>修改列标题样式</h3><p><strong>1.在列标题后面加一个图标。</strong></p><p>以element-ui官方文档一个table表格为例，我们在地址的后面加一个定位标志的图标，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-table</span><br><span class="line">    :data=<span class="string">"tableData2"</span></span><br><span class="line">    style=<span class="string">"width: 100%"</span></span><br><span class="line">    :row-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=<span class="string">"tableRowClassName"</span>&gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      prop=<span class="string">"date"</span></span><br><span class="line">      label=<span class="string">"日期"</span></span><br><span class="line">      width=<span class="string">"180"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-table-column</span></span><br><span class="line"><span class="regexp">      prop="name"</span></span><br><span class="line"><span class="regexp">      label="姓名"</span></span><br><span class="line"><span class="regexp">      width="180"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-table-column&gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      prop=<span class="string">"address"</span></span><br><span class="line">      label=<span class="string">"地址"</span> :render-header=<span class="string">"renderHeader"</span>&gt; <span class="comment">// 加入render事件</span></span><br><span class="line">    &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>el-table&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">  .el-table .warning-row &#123;</span></span><br><span class="line"><span class="regexp">    background: oldlace;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  .el-table .success-row &#123;</span></span><br><span class="line"><span class="regexp">    background: #f0f9eb;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      tableRowClassName(&#123;row, rowIndex&#125;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rowIndex === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'warning-row'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rowIndex === <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'success-row'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// render 事件</span></span><br><span class="line">      renderHeader (h,&#123;column&#125;) &#123; <span class="comment">// h即为cerateElement的简写，具体可看vue官方文档</span></span><br><span class="line">        <span class="keyword">return</span> h(</span><br><span class="line">          <span class="string">'div'</span>,</span><br><span class="line">          [ </span><br><span class="line">            h(<span class="string">'span'</span>, column.label),</span><br><span class="line">            h(<span class="string">'i'</span>, &#123;</span><br><span class="line">              class:'el-icon-location',</span><br><span class="line">              style:<span class="string">'color:#409eff;margin-left:5px;'</span></span><br><span class="line">            &#125;)</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        tableData2: [&#123;</span><br><span class="line">          date: <span class="string">'2016-05-02'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span>,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-04'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-01'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span>,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-03'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/20181113093701200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="图1-1"></p><p><strong>2.在列标题后面添加一个单选框</strong></p><p>还是以上面的代码为例，只写关键代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// render 事件</span></span><br><span class="line">renderHeader (h,&#123;column&#125;) &#123; <span class="comment">// h即为cerateElement的简写，具体可看vue官方文档</span></span><br><span class="line">  <span class="keyword">return</span> h(</span><br><span class="line">   <span class="string">'div'</span>,</span><br><span class="line">   [ </span><br><span class="line">     h(<span class="string">'span'</span>, column.label),</span><br><span class="line">     h(<span class="string">'el-checkbox'</span>,&#123;</span><br><span class="line">       style:<span class="string">'margin-left:5px'</span>,</span><br><span class="line">       on:&#123;</span><br><span class="line">         change:<span class="keyword">this</span>.select <span class="comment">// 选中事件 </span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   ],</span><br><span class="line"> );</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 添加选中事件</span></span><br><span class="line">select (data) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/20181113095540872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="图1-2"></p><p><strong>3.在表头添加一个Tooltip</strong></p><p>我们经常会遇到一些奇怪的需求，但是即使再奇怪我们也不能认输，现在有一个需求，要在列表表题后面添加一个提示，我们开始尝试着做：</p><p>还是以上面的代码为例，刚开始我想直接用‘el-tooltip’，应该不是很难，然后就是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">renderHeader (h,&#123;column&#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> h(</span><br><span class="line">    <span class="string">'div'</span>,</span><br><span class="line">    [ </span><br><span class="line">      h(<span class="string">'span'</span>, column.label),</span><br><span class="line">      h(<span class="string">'el-tooltip'</span>,[</span><br><span class="line">        h(<span class="string">'i'</span>, &#123;</span><br><span class="line">          class:'el-icon-question',</span><br><span class="line">          style:<span class="string">'color:#409eff;margin-left:5px;'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ],&#123;</span><br><span class="line">        content: <span class="string">'这是一个提示'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>运行后发现，基本样式出来了，但是提示没有</p><p><img src="https://img-blog.csdnimg.cn/20181113110227944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="图1-3"></p><p>根据element-ui 关于tooltip的文档，我发现不管是effect, content还是placement    对tooltip都不管用，既然硬上不管用，就曲线救国，通过组件的方法，先造个轮子再走路</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写一个PromptMessage的组件，并全局注册</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tooltip"</span>&gt;</span><br><span class="line">    &lt;el-tooltip effect=<span class="string">"dark"</span> placement=<span class="string">"right"</span>&gt;</span><br><span class="line">      &lt;div slot=<span class="string">"content"</span>&gt; <span class="comment">// 插槽，可提供多行的提示信息</span></span><br><span class="line">        &lt;p v-<span class="keyword">for</span>=<span class="string">"item in messages"</span> :key=<span class="string">"item"</span>&gt;</span><br><span class="line">          &#123;&#123;item&#125;&#125;</span><br><span class="line">        &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-question"</span> style=<span class="string">"color:#409eff;margin-left:5px;font-size:15px;"</span>&gt;&lt;/i&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-tooltip&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    props:['messages']</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>然后在render-header事件中使用组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">renderTip (h,&#123;column&#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> h(</span><br><span class="line">    <span class="string">'div'</span>,&#123;</span><br><span class="line">      style:<span class="string">'display:flex;margin:auto;'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    [</span><br><span class="line">      h(<span class="string">'span'</span>, column.label),</span><br><span class="line">      h(<span class="string">'prompt-message'</span>, &#123;</span><br><span class="line">        props: &#123;<span class="attr">messages</span>: [<span class="string">"这是住址信息"</span>]&#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这次我们发现，果然造的轮子还是挺不错的</p><p><img src="https://img-blog.csdnimg.cn/20181113171637218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="图1-4"></p><h3 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h3><p>或许你会发现，这个原生的createElement 写起来并不简单，而且很费事，我们也可以采用<code>JSX</code>的方式，这个在Vue官方文档中有提到<br><img src="https://img-blog.csdnimg.cn/20181113164011712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="图1-5"></p><p>查看文档，可以找到安装使用的方法</p><p><img src="https://img-blog.csdnimg.cn/20181113170207829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="图1-6"></p><p>安装完成后想要再实现tooltip就简单了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">renderTip (h,&#123;column&#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;el-tooltip <span class="class"><span class="keyword">class</span></span>=<span class="string">"tooltip"</span> effect=<span class="string">"dark"</span> placement=<span class="string">"right"</span>&gt;</span><br><span class="line">      &lt;ul slot=<span class="string">"content"</span>&gt;</span><br><span class="line">        &lt;li&gt;这是第一个提示&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;这是第二个提示&lt;li&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/u</span>l&gt;</span><br><span class="line">      &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-question"</span>&gt;&lt;/i&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-tooltip&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">...</span></span><br></pre></td></tr></table></figure><p>这样看着很好理解，写起来也很方便</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Element-ui自定义table表头，修改列标题样式、添加tooltip,:render-header使用简介&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="vue" scheme="https://pinbolei.cn/categories/vue/"/>
    
    
      <category term="render-header" scheme="https://pinbolei.cn/tags/render-header/"/>
    
      <category term="tooltip" scheme="https://pinbolei.cn/tags/tooltip/"/>
    
      <category term="vue" scheme="https://pinbolei.cn/tags/vue/"/>
    
      <category term="Element-ui" scheme="https://pinbolei.cn/tags/Element-ui/"/>
    
  </entry>
  
  <entry>
    <title>Hosts 和 SwitchHosts</title>
    <link href="https://pinbolei.cn/Hosts%E5%92%8CSwitchHosts/"/>
    <id>https://pinbolei.cn/Hosts和SwitchHosts/</id>
    <published>2018-11-29T07:17:28.000Z</published>
    <updated>2019-05-08T09:26:09.112Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理了一下关于hosts和SwitchHosts知识，希望能帮到你</p></blockquote><hr><a id="more"></a><h2 id="1-什么是-Hosts-和-SwitchHosts"><a href="#1-什么是-Hosts-和-SwitchHosts" class="headerlink" title="1.什么是 Hosts 和 SwitchHosts"></a>1.什么是 Hosts 和 SwitchHosts</h2><h3 id="Hosts"><a href="#Hosts" class="headerlink" title="Hosts"></a>Hosts</h3><p><code>Hosts</code>是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。</p><p><code>注意</code>:Hosts文件配置的映射是静态的，如果网络上的计算机更改了请及时更新IP地址，否则将不能访问。</p><h3 id="Hosts的存储位置"><a href="#Hosts的存储位置" class="headerlink" title="Hosts的存储位置"></a>Hosts的存储位置</h3><p><code>hosts</code>文件在不同操作系统（甚至不同Windows版本）的位置都不大一样:</p><p><strong>1、Windows XP / 2000 / Vista / 7 / 8 / 8.1 / 10</strong> : <code>C:\windows\system32\drivers\etc\</code><br>（XP系统无法使用bat批处理命令直接替换hosts，需手动替换后重新插拔网线或重启方使hosts生效）</p><p><strong>2、Windows 95 / 98 / Me</strong>：<code>%WinDir%\</code>（其实就是C:\WINDOWS）</p><p><strong>3、Linux及其他类Unix操作系统</strong>:  <code>/etc/</code></p><p><strong>4、Mac OS 9及更早的系统</strong>:  <code>System Folder: Preferences</code>或<code>System folder</code>（文件格式可能与Windows和Linux所对应的文件不同） </p><p><strong>5、Mac OS X</strong>:  <code>/private/etc</code>（使用BSD风格的hosts文件）</p><p><strong>6、OS/2及eComStation</strong>：<code>&quot;bootdrive&quot;:\mptn\etc\</code></p><p><strong>7、Android</strong>：<code>/system/etc/</code></p><p><strong>8、Symbian第1/2版手机</strong>：<code>C:\system\data\</code></p><p><strong>9、Symbian第3版手机</strong>：<code>C:\private\10000882\</code>（能使用兼容AllFiles的文件浏览器访问。）</p><p><strong>10、iPhone OS</strong>：<code>/etc/</code>(需要越狱)</p><p><strong>11、iPad OS</strong>：<code>/private/etc</code></p><p><strong>12、webOS</strong>：<code>/etc</code></p><h3 id="Hosts的具体作用"><a href="#Hosts的具体作用" class="headerlink" title="Hosts的具体作用"></a>Hosts的具体作用</h3><p> <strong>1、加快域名解析</strong></p><blockquote><p>对于要经常访问的网站，我们可以通过在Hosts中配置域名和IP的映射关系，提高域名解析速度。由于有了映射关系，当我们输入域名计算机就能很快解析出IP，而不用请求网络上的DNS服务器。</p></blockquote><p><strong>2、方便局域网用户</strong></p><blockquote><p>在很多单位的局域网中，会有服务器提供给用户使用。但由于局域网中一般很少架设DNS服务器，访问这些服务器时，要输入难记的IP地址。这对不少人来说相当麻烦。可以分别给这些服务器取个容易记住的名字，然后在Hosts中建立IP映射，这样以后访问的时候，只要输入这个服务器的名字就行了。</p></blockquote><p><strong>3、屏蔽网站（域名重定向）</strong></p><blockquote><p>有很多网站不经过用户同意就将各种各样的插件安装到你的计算机中，其中有些说不定就是木马或病毒。对于这些网站我们可以利用Hosts把该网站的域名映射到错误的IP或本地计算机的IP，这样就不用访问了。在WINDOWS系统中，约定 127.0.0.1 为本地计算机的IP地址, 0.0.0.0是错误的IP地址。</p><p>如果，我们在Hosts中，写入以下内容：<br>127.0.0.1要屏蔽的网站A的域名<br>0.0.0.0要屏蔽的网站B的域名<br>这样，计算机解析域名A和 B时，就解析到本机IP或错误的IP，达到了屏蔽网站A 和B的目的。</p></blockquote><p><strong>4、顺利连接系统</strong></p><blockquote><p>对于Lotus的服务器和一些数据库服务器，在访问时如果直接输入IP地址那是不能访问的，只能输入服务器名才能访问。那么我们配置好Hosts文件，这样输入服务器名就能顺利连接了。</p></blockquote><p><strong>5、虚拟域名</strong></p><blockquote><p>很多时候，网站建设者需要把”软环境“搭建好，再进行上传调试。但类似于邮件服务，则需要使用域名来辅助调试，这时就可以将本地 IP<br>地址与一个”虚拟域名“做地址指向，就可以达到要求的效果，且无需花费。<br>如：127.0.0.1 网站域名之后在浏览器地址栏中输入对应的网站域名即可。</p></blockquote><h3 id="SwitchHosts"><a href="#SwitchHosts" class="headerlink" title="SwitchHosts"></a>SwitchHosts</h3><p><strong>SwitchHosts 是一个管理、切换多个 hosts 方案的工具。它是一个免费开源软件。</strong><br><img src="https://img-blog.csdnimg.cn/20181108091359607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="SwitchHosts"><br><a href="http://oldj.github.io/SwitchHosts/#cn" target="_blank" rel="noopener">下载地址:http://oldj.github.io/SwitchHosts/#cn</a></p><h2 id="2-SwitchHosts的功能"><a href="#2-SwitchHosts的功能" class="headerlink" title="2.SwitchHosts的功能"></a>2.SwitchHosts的功能</h2><h3 id="1）语法高亮显示"><a href="#1）语法高亮显示" class="headerlink" title="1）语法高亮显示"></a>1）语法高亮显示</h3><p><img src="https://img-blog.csdnimg.cn/20181108092149503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="语法高亮显示"></p><h3 id="2）允许选择多个方案"><a href="#2）允许选择多个方案" class="headerlink" title="2）允许选择多个方案"></a>2）允许选择多个方案</h3><p><img src="https://img-blog.csdnimg.cn/20181108092304136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="选择多个方案"></p><h3 id="3-点击行号可快速切换注释"><a href="#3-点击行号可快速切换注释" class="headerlink" title="3) 点击行号可快速切换注释"></a>3) 点击行号可快速切换注释</h3><p><img src="https://img-blog.csdnimg.cn/20181108092407393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="切换注释"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理了一下关于hosts和SwitchHosts知识，希望能帮到你&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="SwitchHosts" scheme="https://pinbolei.cn/categories/SwitchHosts/"/>
    
    
      <category term="SwitchHosts" scheme="https://pinbolei.cn/tags/SwitchHosts/"/>
    
      <category term="hosts" scheme="https://pinbolei.cn/tags/hosts/"/>
    
  </entry>
  
  <entry>
    <title>Chrome(谷歌)控制台，console实用教程</title>
    <link href="https://pinbolei.cn/Chrome-%E8%B0%B7%E6%AD%8C-%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8Cconsole%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://pinbolei.cn/Chrome-谷歌-控制台，console实用教程/</id>
    <published>2018-11-29T06:41:33.000Z</published>
    <updated>2019-05-08T09:26:37.550Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大家在调试程序的时候，经常会用到控制台，在console下调试各种bug,在此整理了控制台console的一些用法，希望能够帮到你，话不多说，上干货</p></blockquote><hr><a id="more"></a><h3 id="一、先简单的介绍一下chrome的控制台"><a href="#一、先简单的介绍一下chrome的控制台" class="headerlink" title="一、先简单的介绍一下chrome的控制台"></a>一、先简单的介绍一下chrome的控制台</h3><p>1.<strong>Windows</strong>：打开chrome浏览器，按f12就可以轻松的打开控制台（这里着重介绍下mac的，其实都一样，只是博主只有mac 😝）</p><p>2.<strong>mac</strong>:打开chrome浏览器，按fn+ f12就可以轻松的打开控制台（原谅我在此给百度打了一下广告，emmmm….我会考虑向他们收取广告费的..）</p><p><img src="https://img-blog.csdnimg.cn/20181030150050919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="图一"></p><p>如果此时你发现你的控制台并不向我的一样在右面，没关系，继续往下看</p><p><img src="https://img-blog.csdnimg.cn/20181030150438372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="图二"></p><p>首先，看箭头所指的地方有竖着的三个点，没错，就是他，请毫不犹豫的点击它</p><p><img src="https://img-blog.csdnimg.cn/20181030150611884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="图三"></p><p>这时你会发现，出来这么个东西，重点观察最里面的小红框中的几个小方块，从左依次往右，当你点击第一个，会弹出一个窗口，如下</p><p><img src="https://img-blog.csdnimg.cn/20181030151247455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="图四"></p><p>这就是将控制台作为一个窗口向我们展示，假如你关闭掉页面后，再次打开依然会是弹出框样式，此时不必惊慌，仔细发现，在这个弹出的页的右上角，还是有竖着的三个点，点击它会出现上一个图所示的情况，然后我们可以再点击第二个，会变成如下图所示</p><p><img src="https://img-blog.csdnimg.cn/20181030152012423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="图五"></p><p>此时你会发现控制台跑到左边去了，这时候你应该有种恍然大悟的感觉，是的，第三个第四个就是控制台在下面和在右面（剩下的就不贴图了，挺费事的）</p><p><em>介绍完控制台，就该说一说console的用法了，终于可以好好说话了</em>！😂</p><p><strong>有小伙伴就问了为啥不用alert调试程序呢，设想一下，如果有一个数组，里面有超多的元素，但是你想知道这些元素都有哪些具体的值，如果此时用alert，那你真的会被自己整哭的，因为alert阻断线程运行，你不点击alert框的确定按钮下一个alert就不会出现。那如果用console呢？下面我们来做个测试：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">'张三'</span>,<span class="attr">age</span>:<span class="number">13</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">'李四'</span>,<span class="attr">age</span>:<span class="number">14</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">'王五'</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">'小明'</span>,<span class="attr">age</span>:<span class="number">16</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">'小华'</span>,<span class="attr">age</span>:<span class="number">17</span>&#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行一下代码，发现要比alert好多了有木有~</p><p><img src="https://img-blog.csdnimg.cn/20181030164036503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>注意</strong>：刚打开控制台的时候，我们会发现控制台里有其他的东西，比如百度的彩蛋，其实就是招聘信息，这时我们并不想看到这些，怎么？你想看到吗？不，你不想…<br>那如何清除呢？</p><p>1.在控制台输入console.clear()或者直接输入clear(),运行（enter）一下，这时你发现控制台已经清空了</p><p><img src="https://img-blog.csdnimg.cn/20181030155008651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.你也可以通过点击左上角标出的标志，也可以清空控制台<br><img src="https://img-blog.csdnimg.cn/20181030155503323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="二、一般情况下我们用来输入信息的方法主要是用到如下五个"><a href="#二、一般情况下我们用来输入信息的方法主要是用到如下五个" class="headerlink" title="二、一般情况下我们用来输入信息的方法主要是用到如下五个"></a>二、一般情况下我们用来输入信息的方法主要是用到如下五个</h3><ul><li>console.log &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ensp;用于输出普通信息</li><li>console.info &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于输出提示性信息</li><li>console.error  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于输出错误信息</li><li>console.warn    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于输出警示信息</li><li>console.debug &nbsp;&nbsp;&nbsp;&nbsp;用于输出调试信息</li></ul><p><img src="https://img-blog.csdnimg.cn/20181030153944190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="console"></p><ul><li>有小伙伴发现自己输入一个console方法后，想换行结果运行了，此时肯定一脸的懵逼😳，告诉你一个小技巧，<figure class="highlight plain"><figcaption><span>```return(enter)```就可以换行啦，开不开心，意不意外！😝</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 三、其实console还提供了其他的方法供我们使用，我们可以在控制台输入console打印一下查看</span><br><span class="line"></span><br><span class="line">![console提供的方法](https://img-blog.csdnimg.cn/2018103017005462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70)</span><br><span class="line"></span><br><span class="line">### 四、console对象的上面5种方法，都可以使用printf风格的占位符。不过，占位符的种类比较少，只支持```字符（%s）```、```整数（%d或%i）```、```浮点数（%f）```和```对象（%o）```四种</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">```javascript</span><br><span class="line">console.log(&apos;%d年%d月%d日&apos;,2011,3,26); </span><br><span class="line">console.log(&apos;圆周率是%f&apos;,3.1415926);</span><br></pre></td></tr></table></figure></li></ul><p>输出如下：</p><p><img src="https://img-blog.csdnimg.cn/20181030170921340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>**<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">let dog = &#123;</span><br><span class="line">name:&apos;金毛&apos;,</span><br><span class="line">color:&apos;黄色&apos;,</span><br><span class="line">&#125;;</span><br><span class="line">console.log(&apos;%o&apos;,dog);</span><br></pre></td></tr></table></figure></p><p>输出如下：</p><p><img src="https://img-blog.csdnimg.cn/20181030171441249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="五、console-dirxml用来显示网页的某个节点（node）所包含的html-xml代码"><a href="#五、console-dirxml用来显示网页的某个节点（node）所包含的html-xml代码" class="headerlink" title="五、console.dirxml用来显示网页的某个节点（node）所包含的html/xml代码"></a>五、console.dirxml用来显示网页的某个节点（node）所包含的html/xml代码</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;    </span><br><span class="line">    &lt;table id=<span class="string">"mytable"</span>&gt;        </span><br><span class="line">        &lt;tr&gt;            </span><br><span class="line">           &lt;td&gt;A&lt;<span class="regexp">/td&gt;            </span></span><br><span class="line"><span class="regexp">           &lt;td&gt;A&lt;/</span>td&gt;            </span><br><span class="line">           &lt;td&gt;A&lt;<span class="regexp">/td&gt;        </span></span><br><span class="line"><span class="regexp">       &lt;/</span>tr&gt;        </span><br><span class="line">       &lt;tr&gt;            </span><br><span class="line">           &lt;td&gt;bbb&lt;<span class="regexp">/td&gt;            </span></span><br><span class="line"><span class="regexp">           &lt;td&gt;aaa&lt;/</span>td&gt;            </span><br><span class="line">           &lt;td&gt;ccc&lt;<span class="regexp">/td&gt;        </span></span><br><span class="line"><span class="regexp">       &lt;/</span>tr&gt;        </span><br><span class="line">       &lt;tr&gt;            </span><br><span class="line">           &lt;td&gt;<span class="number">111</span>&lt;<span class="regexp">/td&gt;            </span></span><br><span class="line"><span class="regexp">           &lt;td&gt;333&lt;/</span>td&gt;            </span><br><span class="line">           &lt;td&gt;<span class="number">222</span>&lt;<span class="regexp">/td&gt;        </span></span><br><span class="line"><span class="regexp">       &lt;/</span>tr&gt;    </span><br><span class="line">    &lt;<span class="regexp">/table&gt; </span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt; </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;    </span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mytable = <span class="built_in">document</span>.getElementById(<span class="string">'mytable'</span>);</span><br><span class="line">  <span class="built_in">console</span>.dirxml(mytable);   </span><br><span class="line">&#125; </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>输出如下：</p><p><img src="https://img-blog.csdnimg.cn/20181030174759215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="六、console-group输出一组信息的开头，console-groupEnd结束一组输出信息"><a href="#六、console-group输出一组信息的开头，console-groupEnd结束一组输出信息" class="headerlink" title="六、console.group输出一组信息的开头，console.groupEnd结束一组输出信息"></a>六、console.group输出一组信息的开头，console.groupEnd结束一组输出信息</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">'aaa'</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'aaa.aaa'</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br></pre></td></tr></table></figure></p><p>输出如下：</p><p><img src="https://img-blog.csdnimg.cn/20181030175203223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="七、console-assert对输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台"><a href="#七、console-assert对输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台" class="headerlink" title="七、console.assert对输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台"></a>七、console.assert对输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDebug = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.assert(isDebug,<span class="string">'为false时输出的信息'</span>);</span><br></pre></td></tr></table></figure></p><p>输出如下：</p><p><img src="https://img-blog.csdnimg.cn/2018103017563363.png" alt="在这里插入图片描述"></p><h3 id="八、console-count-统计代码被执行的次数"><a href="#八、console-count-统计代码被执行的次数" class="headerlink" title="八、console.count 统计代码被执行的次数"></a>八、console.count 统计代码被执行的次数</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.count(<span class="string">'myFunction被执行的次数'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">myFunction();</span><br><span class="line">myFunction();</span><br><span class="line">myFunction();</span><br></pre></td></tr></table></figure></p><p>输出如下：</p><p><img src="https://img-blog.csdnimg.cn/20181030180148736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="九、console-dir-直接将该DOM结点以DOM树的结构进行输出，可以详细查对象的方法发展等等"><a href="#九、console-dir-直接将该DOM结点以DOM树的结构进行输出，可以详细查对象的方法发展等等" class="headerlink" title="九、console.dir 直接将该DOM结点以DOM树的结构进行输出，可以详细查对象的方法发展等等"></a>九、console.dir 直接将该DOM结点以DOM树的结构进行输出，可以详细查对象的方法发展等等</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  name:<span class="string">'aa'</span>,</span><br><span class="line">  age:<span class="number">12</span>,</span><br><span class="line">  sex:<span class="string">'man'</span>,</span><br><span class="line">  myFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cpnsole.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.dir(myObject);</span><br></pre></td></tr></table></figure></p><p>输出如下：</p><p><img src="https://img-blog.csdnimg.cn/20181031092735658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="十、console-time-计时开始-console-timeEnd-计时结束"><a href="#十、console-time-计时开始-console-timeEnd-计时结束" class="headerlink" title="十、console.time 计时开始,console.timeEnd 计时结束"></a>十、console.time 计时开始,console.timeEnd 计时结束</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用console.time来统计实例化1000000个对象所需时间</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'Array initialie'</span>);</span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  array[i] = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'Array initialie'</span>);</span><br></pre></td></tr></table></figure></p><p>输出如下：<br><img src="https://img-blog.csdnimg.cn/20181031093421261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="十一、再说下使用console-log的一些技巧"><a href="#十一、再说下使用console-log的一些技巧" class="headerlink" title="十一、再说下使用console.log的一些技巧"></a>十一、再说下使用console.log的一些技巧</h3><ol><li>指定输出文字的样式</li><li><p>利用控制台输出图片</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// text</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'%c 你看 '</span>,<span class="string">'color:red;font-size:5em;background-color:yellow'</span>);</span><br><span class="line"> <span class="comment">// 3D Text</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"%c3D Text"</span>,<span class="string">" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em"</span>);</span><br><span class="line"><span class="comment">// Rainbow Text</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%cRainbow Text '</span>, <span class="string">'background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), color-stop(0.9, #ff2), color-stop(1, #f22) );color:transparent;-webkit-background-clip: text;font-size:5em;'</span>);</span><br><span class="line"><span class="comment">// Colorful CSS</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%cColorful CSS"</span>,<span class="string">"background: rgba(252,234,187,1);background: -moz-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%,rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -webkit-gradient(left top, right top, color-stop(0%, rgba(252,234,187,1)), color-stop(12%, rgba(175,250,77,1)), color-stop(28%, rgba(0,247,49,1)), color-stop(39%, rgba(0,210,247,1)), color-stop(51%, rgba(0,189,247,1)), color-stop(64%, rgba(133,108,217,1)), color-stop(78%, rgba(177,0,247,1)), color-stop(87%, rgba(247,0,189,1)), color-stop(100%, rgba(245,22,52,1)));background: -webkit-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -o-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -ms-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: linear-gradient(to right, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fceabb', endColorstr='#f51634', GradientType=1 );font-size:5em"</span>);</span><br><span class="line"><span class="comment">// 输出动态图</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%c "</span>, <span class="string">"background: url(http://g.hiphotos.baidu.com/zhidao/wh%3D450%2C600/sign=7408a51e88d4b31cf0699cbfb2e60b49/c9fcc3cec3fdfc03aca05de5d73f8794a5c22696.jpg) no-repeat center;padding-left:640px;padding-bottom: 242px;"</span>);</span><br></pre></td></tr></table></figure></li></ol><p>输出如下：<br><img src="https://img-blog.csdnimg.cn/20181031100321100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181031100551862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181031100708375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpbmJvbGVp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181031110308636.gif" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;大家在调试程序的时候，经常会用到控制台，在console下调试各种bug,在此整理了控制台console的一些用法，希望能够帮到你，话不多说，上干货&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="前端" scheme="https://pinbolei.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="console" scheme="https://pinbolei.cn/tags/console/"/>
    
  </entry>
  
  <entry>
    <title>ES6部分常用知识整理</title>
    <link href="https://pinbolei.cn/ES6%E9%83%A8%E5%88%86%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>https://pinbolei.cn/ES6部分常用知识整理/</id>
    <published>2018-11-26T02:15:53.000Z</published>
    <updated>2019-05-08T09:26:15.681Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在这整理了一些常用的ES6的知识，希望能够帮助开发者更加了解和运用ES6</p></blockquote><hr><a id="more"></a><h2 id="垃圾作用域"><a href="#垃圾作用域" class="headerlink" title="垃圾作用域"></a>垃圾作用域</h2><h3 id="1-let取代var"><a href="#1-let取代var" class="headerlink" title="1.let取代var"></a>1.let取代var</h3><p>ES6提出两个新的声明变量的命令 <strong>let</strong>,<strong>const</strong>，其中<strong>let</strong>完全可以取代<strong>var</strong>（两者语义相同）<br>注：<code>var命令存在变量提升作用，let命令没有这个问题</code></p><h3 id="2-全局变量和线程安全"><a href="#2-全局变量和线程安全" class="headerlink" title="2.全局变量和线程安全"></a>2.全局变量和线程安全</h3><p>在<strong>let</strong>和<strong>const</strong>之间，建议优先使用<strong>const</strong>，尤其在全局环境，不应该设置变量，只应设置常量。<br><strong>const</strong>优于<strong>let</strong>的几个原因：</p><ol><li>const可以提醒阅读程序的人，这个变量不应该改变。</li><li>const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算。</li><li>JavaScript编译器会对const进行优化，所以多使用const也有利于提高程序的运算效率。也就是说let和const的本质区别，其实是编译器内部的处理不同</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>静态字符串一律使用单引号或反引号，不使用双引号，动态字符串使用反引号<br>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">'foobar'</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">`foo&#123;a&#125;bar`</span>;</span><br></pre></td></tr></table></figure></p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="1-使用数组成员对变量赋值，优先使用解构赋值"><a href="#1-使用数组成员对变量赋值，优先使用解构赋值" class="headerlink" title="1.使用数组成员对变量赋值，优先使用解构赋值"></a>1.使用数组成员对变量赋值，优先使用解构赋值</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first,second] = arr;</span><br></pre></td></tr></table></figure></p><h3 id="2-函数的参数如果是对象的成员，优先使用解构赋值"><a href="#2-函数的参数如果是对象的成员，优先使用解构赋值" class="headerlink" title="2.函数的参数如果是对象的成员，优先使用解构赋值"></a>2.函数的参数如果是对象的成员，优先使用解构赋值</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;firstName,lastName&#125; = obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span> (<span class="params">&#123;firstName,lastName&#125;</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值，这样有利于以后添加返回值，以及更改返回值的顺序"><a href="#3-如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值，这样有利于以后添加返回值，以及更改返回值的顺序" class="headerlink" title="3.如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值，这样有利于以后添加返回值，以及更改返回值的顺序"></a>3.如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值，这样有利于以后添加返回值，以及更改返回值的顺序</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [left,right,top,bottom];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;left,right,top,bottom&#125;;</span><br><span class="line">  <span class="keyword">const</span> &#123;left,right&#125; = processInput (input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="1-单行定义的对象，最后一个成员不以逗号结尾，多行定义的对象，最后一个成员以逗号结尾"><a href="#1-单行定义的对象，最后一个成员不以逗号结尾，多行定义的对象，最后一个成员以逗号结尾" class="headerlink" title="1.单行定义的对象，最后一个成员不以逗号结尾，多行定义的对象，最后一个成员以逗号结尾"></a>1.单行定义的对象，最后一个成员不以逗号结尾，多行定义的对象，最后一个成员以逗号结尾</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">k1</span>:v1,<span class="attr">k2</span>:v2,&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  k1:v1,</span><br><span class="line">  k2:v2</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">k1</span>:v1,<span class="attr">k2</span>:v2&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  k1:v1,</span><br><span class="line">  k2:v2,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="2-对象尽量静态化，一旦定义，就不得随意添加新的属性，如果添加新属性不可避免，要使用Object-assign-方法"><a href="#2-对象尽量静态化，一旦定义，就不得随意添加新的属性，如果添加新属性不可避免，要使用Object-assign-方法" class="headerlink" title="2.对象尽量静态化，一旦定义，就不得随意添加新的属性，如果添加新属性不可避免，要使用Object.assign()方法"></a>2.对象尽量静态化，一旦定义，就不得随意添加新的属性，如果添加新属性不可避免，要使用Object.assign()方法</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line">a.x = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// if reshape unavoidable</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign (a,&#123;<span class="attr">x</span>:<span class="number">3</span>&#125;);</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">x</span>:<span class="literal">null</span>&#125;;</span><br><span class="line">a.x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><h3 id="3-如果对象的属性名是动态的，可以在创造对象的时候使用属性表达式定义"><a href="#3-如果对象的属性名是动态的，可以在创造对象的时候使用属性表达式定义" class="headerlink" title="3.如果对象的属性名是动态的，可以在创造对象的时候使用属性表达式定义"></a>3.如果对象的属性名是动态的，可以在创造对象的时候使用属性表达式定义</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id:<span class="number">5</span>,</span><br><span class="line">  name:<span class="string">'xiaolei'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id:<span class="number">5</span>,</span><br><span class="line">  name:<span class="string">'xiaolei'</span>,</span><br><span class="line">  [getKey(<span class="string">'enabled'</span>)]:<span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面的代码中，对象obj的最后一个属性名，需要计算得到。这时最好利用属性表达式，在新建obj的时候，将该属性与其他属性定义在一起，这样，所有属性就在一个地方定义了。</p><h3 id="4-对象的属性和方法尽量采用简洁表达法，这样易于描述和书写"><a href="#4-对象的属性和方法尽量采用简洁表达法，这样易于描述和书写" class="headerlink" title="4.对象的属性和方法尽量采用简洁表达法，这样易于描述和书写"></a>4.对象的属性和方法尽量采用简洁表达法，这样易于描述和书写</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="string">'some value'</span>;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  ref:ref,</span><br><span class="line">  value:<span class="number">1</span>,</span><br><span class="line">  addValue:<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  ref, <span class="comment">// 注意此处的写法</span></span><br><span class="line">  value:<span class="number">1</span>,</span><br><span class="line">  addValue:<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="1-使用扩展运算符（…）拷贝数组"><a href="#1-使用扩展运算符（…）拷贝数组" class="headerlink" title="1.使用扩展运算符（…）拷贝数组"></a>1.使用扩展运算符（…）拷贝数组</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure></p><h3 id="2-使用Array-form方法将类似数组的对象转为数组"><a href="#2-使用Array-form方法将类似数组的对象转为数组" class="headerlink" title="2.使用Array.form方法将类似数组的对象转为数组"></a>2.使用Array.form方法将类似数组的对象转为数组</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br></pre></td></tr></table></figure></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="1-立即执行函数可以写成箭头函数的额形式"><a href="#1-立即执行函数可以写成箭头函数的额形式" class="headerlink" title="1.立即执行函数可以写成箭头函数的额形式"></a>1.立即执行函数可以写成箭头函数的额形式</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'welcome to the Internet'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h3 id="2-那些需要函数表达式的场合，尽量使用箭头函数代替。因为这样更简洁，而且绑定了this"><a href="#2-那些需要函数表达式的场合，尽量使用箭头函数代替。因为这样更简洁，而且绑定了this" class="headerlink" title="2.那些需要函数表达式的场合，尽量使用箭头函数代替。因为这样更简洁，而且绑定了this."></a>2.那些需要函数表达式的场合，尽量使用箭头函数代替。因为这样更简洁，而且绑定了this.</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// best</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure></p><h3 id="3-箭头函数形式取代Function-prototype-bind-不应再用self-this-that-绑定this"><a href="#3-箭头函数形式取代Function-prototype-bind-不应再用self-this-that-绑定this" class="headerlink" title="3.箭头函数形式取代Function.prototype.bind,不应再用self/_this/that 绑定this"></a>3.箭头函数形式取代Function.prototype.bind,不应再用self/_this/that 绑定this</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">const</span> boundMethod = <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> method.apply(self.params);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// acceptable</span></span><br><span class="line"><span class="keyword">const</span> boundMethod = method.bind(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> boundMethod = <span class="function">(<span class="params">...params</span>) =&gt;</span> method.apply(<span class="keyword">this</span>.params);</span><br></pre></td></tr></table></figure></p><h3 id="4-所有的配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数"><a href="#4-所有的配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数" class="headerlink" title="4.所有的配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数"></a>4.所有的配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span> (<span class="params">a,b,option=false</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span> (<span class="params">a,b,&#123;option=false&#125;</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="5-使用默认值语法设置函数参数的默认值"><a href="#5-使用默认值语法设置函数参数的默认值" class="headerlink" title="5.使用默认值语法设置函数参数的默认值"></a>5.使用默认值语法设置函数参数的默认值</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handles</span> (<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handles</span> (<span class="params">opts = &#123;&#125;</span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="6-不要在函数体内使用arguement变量，使用rest运算符-…-代替，因为rest运算明显表明你想要获取参数，而且arguement是一个类似数组的对象，而rest运算符可以提供一个真正的数组"><a href="#6-不要在函数体内使用arguement变量，使用rest运算符-…-代替，因为rest运算明显表明你想要获取参数，而且arguement是一个类似数组的对象，而rest运算符可以提供一个真正的数组" class="headerlink" title="6.不要在函数体内使用arguement变量，使用rest运算符(…)代替，因为rest运算明显表明你想要获取参数，而且arguement是一个类似数组的对象，而rest运算符可以提供一个真正的数组"></a>6.不要在函数体内使用arguement变量，使用rest运算符(…)代替，因为rest运算明显表明你想要获取参数，而且arguement是一个类似数组的对象，而rest运算符可以提供一个真正的数组</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAl</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(arguements);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAl</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="Map结构"><a href="#Map结构" class="headerlink" title="Map结构"></a>Map结构</h2><p>1.注意区分==Object==和==Map==,只有模拟现实世界的实体对象时，才使用Object。<br>2.如果只是需要key:value的数据结构，使用Map结构，因为Map有内建的遍历机制。<br>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(arr);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item[<span class="number">0</span>],item[<span class="number">1</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>用class取代需要prototype的操作，因为class的写法更简洁，易于理解<br>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span> (<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._queue = [...contents];</span><br><span class="line">&#125;;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">this</span>._queue.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (contents = []) &#123;</span><br><span class="line"><span class="keyword">this</span>._queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop () &#123;</span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">this</span>._queue.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="1-首先Module的语法是Javascript的标准写法，坚持使用这种写法，使用import代替require"><a href="#1-首先Module的语法是Javascript的标准写法，坚持使用这种写法，使用import代替require" class="headerlink" title="1.首先Module的语法是Javascript的标准写法，坚持使用这种写法，使用import代替require"></a>1.首先Module的语法是Javascript的标准写法，坚持使用这种写法，使用import代替require</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">'moduleA'</span>);</span><br><span class="line"><span class="keyword">const</span> func1 = moduleA.func1;</span><br><span class="line"><span class="keyword">const</span> func2 = moduleA.func2;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123;func1,func2&#125; <span class="keyword">from</span> <span class="string">'moduleA'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="2-使用export取代module-exports"><a href="#2-使用export取代module-exports" class="headerlink" title="2.使用export取代module.exports"></a>2.使用export取代module.exports</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commonJs写法</span></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"><span class="keyword">var</span> Breadcrumbs = React.createClass(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">nav</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml">module.exports = Breadcrumbs;</span></span><br><span class="line"><span class="xml">// ES6写法</span></span><br><span class="line"><span class="xml">import React from 'react';</span></span><br><span class="line"><span class="xml">class Breadcrumbs extends React.Component&#123;</span></span><br><span class="line"><span class="xml">  render () &#123;</span></span><br><span class="line"><span class="xml">return <span class="tag">&lt;<span class="name">nav</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">export default Breadcrumbs;</span></span><br></pre></td></tr></table></figure></p><p>如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default。<br><code>export default 与普通的 export 不要同时使用</code></p><h3 id="3-不要在模块使用通配符，因为这样可以确保你的模块之中，只有一个默认输出（export-default）"><a href="#3-不要在模块使用通配符，因为这样可以确保你的模块之中，只有一个默认输出（export-default）" class="headerlink" title="3.不要在模块使用通配符，因为这样可以确保你的模块之中，只有一个默认输出（export default）"></a>3.不要在模块使用通配符，因为这样可以确保你的模块之中，只有一个默认输出（export default）</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myObject <span class="keyword">from</span> <span class="string">'./importModule'</span>;</span><br><span class="line"><span class="comment">// goood</span></span><br><span class="line"><span class="keyword">import</span> myObject <span class="keyword">from</span> <span class="string">'./importModule'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="4-如果模块默认输出一个函数，函数名的首字母应该小写"><a href="#4-如果模块默认输出一个函数，函数名的首字母应该小写" class="headerlink" title="4.如果模块默认输出一个函数，函数名的首字母应该小写"></a>4.如果模块默认输出一个函数，函数名的首字母应该小写</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure></p><h3 id="5-如果模块默认输出一个对象，对象名的首字母应该大写"><a href="#5-如果模块默认输出一个对象，对象名的首字母应该大写" class="headerlink" title="5.如果模块默认输出一个对象，对象名的首字母应该大写"></a>5.如果模块默认输出一个对象，对象名的首字母应该大写</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> StyleGuide () &#123;</span><br><span class="line">  es6:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> StyleGuide;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在这整理了一些常用的ES6的知识，希望能够帮助开发者更加了解和运用ES6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="ES6" scheme="https://pinbolei.cn/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://pinbolei.cn/tags/ES6/"/>
    
      <category term="前端" scheme="https://pinbolei.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
