<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小磊的博客</title>
  
  <subtitle>这是一个有故事的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-28T00:57:58.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>pinbolei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6部分常用知识整理</title>
    <link href="http://yoursite.com/2018/11/26/ES6%E9%83%A8%E5%88%86%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/11/26/ES6部分常用知识整理/</id>
    <published>2018-11-26T02:15:53.000Z</published>
    <updated>2018-11-28T00:57:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>在这整理了一些常用的ES6的知识，希望能够帮助开发者更加了解和运用ES6</em></p><h2 id="垃圾作用域"><a href="#垃圾作用域" class="headerlink" title="垃圾作用域"></a>垃圾作用域</h2><h3 id="1-let取代var"><a href="#1-let取代var" class="headerlink" title="1.let取代var"></a>1.let取代var</h3><p>ES6提出两个新的声明变量的命令 <strong>let</strong>,<strong>const</strong>，其中<strong>let</strong>完全可以取代<strong>var</strong>（两者语义相同）<br>注：<code>var命令存在变量提升作用，let命令没有这个问题</code></p><h3 id="2-全局变量和线程安全"><a href="#2-全局变量和线程安全" class="headerlink" title="2.全局变量和线程安全"></a>2.全局变量和线程安全</h3><p>在<strong>let</strong>和<strong>const</strong>之间，建议优先使用<strong>const</strong>，尤其在全局环境，不应该设置变量，只应设置常量。<br><strong>const</strong>优于<strong>let</strong>的几个原因：</p><ol><li>const可以提醒阅读程序的人，这个变量不应该改变。</li><li>const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算。</li><li>JavaScript编译器会对const进行优化，所以多使用const也有利于提高程序的运算效率。也就是说let和const的本质区别，其实是编译器内部的处理不同</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>静态字符串一律使用单引号或反引号，不使用双引号，动态字符串使用反引号<br>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">'foobar'</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">`foo&#123;a&#125;bar`</span>;</span><br></pre></td></tr></table></figure></p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="1-使用数组成员对变量赋值，优先使用解构赋值"><a href="#1-使用数组成员对变量赋值，优先使用解构赋值" class="headerlink" title="1.使用数组成员对变量赋值，优先使用解构赋值"></a>1.使用数组成员对变量赋值，优先使用解构赋值</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first,second] = arr;</span><br></pre></td></tr></table></figure></p><h3 id="2-函数的参数如果是对象的成员，优先使用解构赋值"><a href="#2-函数的参数如果是对象的成员，优先使用解构赋值" class="headerlink" title="2.函数的参数如果是对象的成员，优先使用解构赋值"></a>2.函数的参数如果是对象的成员，优先使用解构赋值</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;firstName,lastName&#125; = obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span> (<span class="params">&#123;firstName,lastName&#125;</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值，这样有利于以后添加返回值，以及更改返回值的顺序"><a href="#3-如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值，这样有利于以后添加返回值，以及更改返回值的顺序" class="headerlink" title="3.如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值，这样有利于以后添加返回值，以及更改返回值的顺序"></a>3.如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值，这样有利于以后添加返回值，以及更改返回值的顺序</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [left,right,top,bottom];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;left,right,top,bottom&#125;;</span><br><span class="line">  <span class="keyword">const</span> &#123;left,right&#125; = processInput (input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="1-单行定义的对象，最后一个成员不以逗号结尾，多行定义的对象，最后一个成员以逗号结尾"><a href="#1-单行定义的对象，最后一个成员不以逗号结尾，多行定义的对象，最后一个成员以逗号结尾" class="headerlink" title="1.单行定义的对象，最后一个成员不以逗号结尾，多行定义的对象，最后一个成员以逗号结尾"></a>1.单行定义的对象，最后一个成员不以逗号结尾，多行定义的对象，最后一个成员以逗号结尾</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">k1</span>:v1,<span class="attr">k2</span>:v2,&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  k1:v1,</span><br><span class="line">  k2:v2</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">k1</span>:v1,<span class="attr">k2</span>:v2&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  k1:v1,</span><br><span class="line">  k2:v2,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="2-对象尽量静态化，一旦定义，就不得随意添加新的属性，如果添加新属性不可避免，要使用Object-assign-方法"><a href="#2-对象尽量静态化，一旦定义，就不得随意添加新的属性，如果添加新属性不可避免，要使用Object-assign-方法" class="headerlink" title="2.对象尽量静态化，一旦定义，就不得随意添加新的属性，如果添加新属性不可避免，要使用Object.assign()方法"></a>2.对象尽量静态化，一旦定义，就不得随意添加新的属性，如果添加新属性不可避免，要使用Object.assign()方法</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line">a.x = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// if reshape unavoidable</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign (a,&#123;<span class="attr">x</span>:<span class="number">3</span>&#125;);</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">x</span>:<span class="literal">null</span>&#125;;</span><br><span class="line">a.x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><h3 id="3-如果对象的属性名是动态的，可以在创造对象的时候使用属性表达式定义"><a href="#3-如果对象的属性名是动态的，可以在创造对象的时候使用属性表达式定义" class="headerlink" title="3.如果对象的属性名是动态的，可以在创造对象的时候使用属性表达式定义"></a>3.如果对象的属性名是动态的，可以在创造对象的时候使用属性表达式定义</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id:<span class="number">5</span>,</span><br><span class="line">  name:<span class="string">'xiaolei'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id:<span class="number">5</span>,</span><br><span class="line">  name:<span class="string">'xiaolei'</span>,</span><br><span class="line">  [getKey(<span class="string">'enabled'</span>)]:<span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面的代码中，对象obj的最后一个属性名，需要计算得到。这时最好利用属性表达式，在新建obj的时候，将该属性与其他属性定义在一起，这样，所有属性就在一个地方定义了。</p><h3 id="4-对象的属性和方法尽量采用简洁表达法，这样易于描述和书写"><a href="#4-对象的属性和方法尽量采用简洁表达法，这样易于描述和书写" class="headerlink" title="4.对象的属性和方法尽量采用简洁表达法，这样易于描述和书写"></a>4.对象的属性和方法尽量采用简洁表达法，这样易于描述和书写</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="string">'some value'</span>;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  ref:ref,</span><br><span class="line">  value:<span class="number">1</span>,</span><br><span class="line">  addValue:<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  ref, <span class="comment">// 注意此处的写法</span></span><br><span class="line">  value:<span class="number">1</span>,</span><br><span class="line">  addValue:<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="1-使用扩展运算符（…）拷贝数组"><a href="#1-使用扩展运算符（…）拷贝数组" class="headerlink" title="1.使用扩展运算符（…）拷贝数组"></a>1.使用扩展运算符（…）拷贝数组</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure></p><h3 id="2-使用Array-form方法将类似数组的对象转为数组"><a href="#2-使用Array-form方法将类似数组的对象转为数组" class="headerlink" title="2.使用Array.form方法将类似数组的对象转为数组"></a>2.使用Array.form方法将类似数组的对象转为数组</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br></pre></td></tr></table></figure></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="1-立即执行函数可以写成箭头函数的额形式"><a href="#1-立即执行函数可以写成箭头函数的额形式" class="headerlink" title="1.立即执行函数可以写成箭头函数的额形式"></a>1.立即执行函数可以写成箭头函数的额形式</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'welcome to the Internet'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h3 id="2-那些需要函数表达式的场合，尽量使用箭头函数代替。因为这样更简洁，而且绑定了this"><a href="#2-那些需要函数表达式的场合，尽量使用箭头函数代替。因为这样更简洁，而且绑定了this" class="headerlink" title="2.那些需要函数表达式的场合，尽量使用箭头函数代替。因为这样更简洁，而且绑定了this."></a>2.那些需要函数表达式的场合，尽量使用箭头函数代替。因为这样更简洁，而且绑定了this.</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// best</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure></p><h3 id="3-箭头函数形式取代Function-prototype-bind-不应再用self-this-that-绑定this"><a href="#3-箭头函数形式取代Function-prototype-bind-不应再用self-this-that-绑定this" class="headerlink" title="3.箭头函数形式取代Function.prototype.bind,不应再用self/_this/that 绑定this"></a>3.箭头函数形式取代Function.prototype.bind,不应再用self/_this/that 绑定this</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">const</span> boundMethod = <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> method.apply(self.params);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// acceptable</span></span><br><span class="line"><span class="keyword">const</span> boundMethod = method.bind(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> boundMethod = <span class="function">(<span class="params">...params</span>) =&gt;</span> method.apply(<span class="keyword">this</span>.params);</span><br></pre></td></tr></table></figure></p><h3 id="4-所有的配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数"><a href="#4-所有的配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数" class="headerlink" title="4.所有的配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数"></a>4.所有的配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span> (<span class="params">a,b,option=false</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span> (<span class="params">a,b,&#123;option=false&#125;</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="5-使用默认值语法设置函数参数的默认值"><a href="#5-使用默认值语法设置函数参数的默认值" class="headerlink" title="5.使用默认值语法设置函数参数的默认值"></a>5.使用默认值语法设置函数参数的默认值</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handles</span> (<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handles</span> (<span class="params">opts = &#123;&#125;</span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="6-不要在函数体内使用arguement变量，使用rest运算符-…-代替，因为rest运算明显表明你想要获取参数，而且arguement是一个类似数组的对象，而rest运算符可以提供一个真正的数组"><a href="#6-不要在函数体内使用arguement变量，使用rest运算符-…-代替，因为rest运算明显表明你想要获取参数，而且arguement是一个类似数组的对象，而rest运算符可以提供一个真正的数组" class="headerlink" title="6.不要在函数体内使用arguement变量，使用rest运算符(…)代替，因为rest运算明显表明你想要获取参数，而且arguement是一个类似数组的对象，而rest运算符可以提供一个真正的数组"></a>6.不要在函数体内使用arguement变量，使用rest运算符(…)代替，因为rest运算明显表明你想要获取参数，而且arguement是一个类似数组的对象，而rest运算符可以提供一个真正的数组</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAl</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(arguements);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAl</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="Map结构"><a href="#Map结构" class="headerlink" title="Map结构"></a>Map结构</h2><p>1.注意区分==Object==和==Map==,只有模拟现实世界的实体对象时，才使用Object。<br>2.如果只是需要key:value的数据结构，使用Map结构，因为Map有内建的遍历机制。<br>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(arr);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item[<span class="number">0</span>],item[<span class="number">1</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>用class取代需要prototype的操作，因为class的写法更简洁，易于理解<br>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span> (<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._queue = [...contents];</span><br><span class="line">&#125;;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">this</span>._queue.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (contents = []) &#123;</span><br><span class="line"><span class="keyword">this</span>._queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop () &#123;</span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">this</span>._queue.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="1-首先Module的语法是Javascript的标准写法，坚持使用这种写法，使用import代替require"><a href="#1-首先Module的语法是Javascript的标准写法，坚持使用这种写法，使用import代替require" class="headerlink" title="1.首先Module的语法是Javascript的标准写法，坚持使用这种写法，使用import代替require"></a>1.首先Module的语法是Javascript的标准写法，坚持使用这种写法，使用import代替require</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">'moduleA'</span>);</span><br><span class="line"><span class="keyword">const</span> func1 = moduleA.func1;</span><br><span class="line"><span class="keyword">const</span> func2 = moduleA.func2;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123;func1,func2&#125; <span class="keyword">from</span> <span class="string">'moduleA'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="2-使用export取代module-exports"><a href="#2-使用export取代module-exports" class="headerlink" title="2.使用export取代module.exports"></a>2.使用export取代module.exports</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commonJs写法</span></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"><span class="keyword">var</span> Breadcrumbs = React.createClass(&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line"><span class="keyword">return</span> &lt;nav /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = Breadcrumbs;</span><br><span class="line">// ES6写法</span><br><span class="line">import React from 'react';</span><br><span class="line">class Breadcrumbs extends React.Component&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">return &lt;nav /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default Breadcrumbs;</span><br></pre></td></tr></table></figure></p><p>如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default。<br><code>export default 与普通的 export 不要同时使用</code></p><h3 id="3-不要在模块使用通配符，因为这样可以确保你的模块之中，只有一个默认输出（export-default）"><a href="#3-不要在模块使用通配符，因为这样可以确保你的模块之中，只有一个默认输出（export-default）" class="headerlink" title="3.不要在模块使用通配符，因为这样可以确保你的模块之中，只有一个默认输出（export default）"></a>3.不要在模块使用通配符，因为这样可以确保你的模块之中，只有一个默认输出（export default）</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myObject <span class="keyword">from</span> <span class="string">'./importModule'</span>;</span><br><span class="line"><span class="comment">// goood</span></span><br><span class="line"><span class="keyword">import</span> myObject <span class="keyword">from</span> <span class="string">'./importModule'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="4-如果模块默认输出一个函数，函数名的首字母应该小写"><a href="#4-如果模块默认输出一个函数，函数名的首字母应该小写" class="headerlink" title="4.如果模块默认输出一个函数，函数名的首字母应该小写"></a>4.如果模块默认输出一个函数，函数名的首字母应该小写</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure></p><h3 id="5-如果模块默认输出一个对象，对象名的首字母应该大写"><a href="#5-如果模块默认输出一个对象，对象名的首字母应该大写" class="headerlink" title="5.如果模块默认输出一个对象，对象名的首字母应该大写"></a>5.如果模块默认输出一个对象，对象名的首字母应该大写</h3><p>例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> StyleGuide () &#123;</span><br><span class="line">  es6:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> StyleGuide;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;在这整理了一些常用的ES6的知识，希望能够帮助开发者更加了解和运用ES6&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;垃圾作用域&quot;&gt;&lt;a href=&quot;#垃圾作用域&quot; class=&quot;headerlink&quot; title=&quot;垃圾作用域&quot;&gt;&lt;/a&gt;垃圾作用域&lt;/h2&gt;&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/23/hello-world/"/>
    <id>http://yoursite.com/2018/11/23/hello-world/</id>
    <published>2018-11-23T07:56:20.000Z</published>
    <updated>2018-11-23T07:56:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
